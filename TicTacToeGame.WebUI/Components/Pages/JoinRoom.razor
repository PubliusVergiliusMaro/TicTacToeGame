@page "/join-room"

@using System.Timers
@using System.Diagnostics
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using TicTacToeGame.Domain.Models
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.HubConnections
@using TicTacToeGame.WebUI.Hubs

@inject NavigationManager _navigationManager
@inject PlayerRepository _playerRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject JoinRoomHubConnection JoinRoomHubConnection

@implements IAsyncDisposable
@rendermode InteractiveServer

<section>
    <div>
        <div class="top-row d-flex justify-content-end">
            <a href="host-room">Generate Code</a>
        </div>
        <h3>JoinRoom</h3>
        <h4 class="text-danger">@_declineMessage</h4>

        <div class="row">
            <h4 class="col-5">Enter Room Id:</h4>
            <input type="text" class="col-5" @bind="@_roomId" maxlength="6" />
        </div>
        <div class="row">
            <button style="margin:30px 10px 10px 10px;height:50px; width:100px;" @onclick="JoinGameRoom">
                Join Room
            </button>
        </div>
    </div>
</section>

@code {
    private HubConnection hubConnection;

    private string? _roomId;
    private int roomId;

    private string _userId = "";

    private string _declineMessage = "";
    private Timer _messageTimer;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? user = authState.User;
        _userId = user.Claims.First().Value.ToString();

        JoinRoomHubConnection.AcceptJoiningEvent += AcceptJoining;

        JoinRoomHubConnection.DeclineJoiningEvent += DeclineJoining;

        await JoinRoomHubConnection.StartConnectionAsync();
    }
    private async Task AcceptJoining(int joinedRoomId, int gameRoomId)
    {
        if (roomId == joinedRoomId)
        {
            await JoinRoomHubConnection.JoinGameAsync(gameRoomId);

            _navigationManager.NavigateTo("/game");
        }
    }
    private void DeclineJoining(string declineMessage)
    {
        _ = InvokeAsync(() =>
        {
            _declineMessage = declineMessage;
            ResetMessageTimer();

            StateHasChanged();
        });
    }
    private async Task JoinGameRoom()
    {
        Player currentPlayer = _playerRepository.GetById(_userId);

        if (int.TryParse(_roomId, out roomId))
        {
            await JoinRoomHubConnection.JoinRoomAsync(roomId, currentPlayer);
        }
        else
        {
            _ = InvokeAsync(() =>
            {
                _declineMessage = "Invalid room id";
                ResetMessageTimer();

                StateHasChanged();
            });
        }
    }

    private void ResetMessageTimer()
    {
        if (_messageTimer != null)
        {
            _messageTimer.Stop();
            _messageTimer.Start();
        }
        else
        {
            _messageTimer = new Timer(4000);
            _messageTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                _declineMessage = "";
                StateHasChanged();
            });
            _messageTimer.Stop();
        };
            _messageTimer.AutoReset = false;
            _messageTimer.Start();
        }
    }

    public async ValueTask DisposeAsync()
    {
        _messageTimer?.Dispose();
        await JoinRoomHubConnection.DisposeAsync();
    }
}
