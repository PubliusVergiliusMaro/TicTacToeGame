@page "/join-room"

@using System.Timers
@using System.Diagnostics
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using TicTacToeGame.Domain.Models
@using TicTacToeGame.Domain.Repositories

@inject NavigationManager _navigationManager
@inject PlayerRepository _playerRepository
@inject AuthenticationStateProvider _authenticationStateProvider

@implements IDisposable
@rendermode InteractiveServer

<section>
    <div>
        <div class="top-row d-flex justify-content-end">
            <a href="host-room">Generate Code</a>
        </div>
        <h3>JoinRoom</h3>
        <h4 class="text-danger">@_declineMessage</h4>

        <div class="row">
            <h4 class="col-5">Enter Room Id:</h4>
            <input type="text" class="col-5" @bind="@_roomId" />
        </div>
        <div class="row">
            <button style="margin:30px 10px 10px 10px;height:50px; width:100px;" @onclick="JoinGameRoom">
                Join Room
            </button>
        </div>
    </div>
</section>


@code {
    private HubConnection hubConnection;
    private Player testPlaye;
    private int _roomId;
    private string _userId;
    private string _declineMessage;
    private Timer _resetTimer;
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? user = authState.User;
        _userId = user.Claims.First().Value.ToString();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        hubConnection.On<int, Guid>("AcceptJoining", async (joinedRoomId, gameId) =>
        {
            if (_roomId == joinedRoomId)
            {
                await hubConnection.SendAsync("JoinGame", gameId);
                _navigationManager.NavigateTo("/game");
            }
        });

        // fix bug with not showing decline message when it comes when timer is elapsed
        hubConnection.On<string>("DeclineJoining", (declineMessage) =>
        {
            InvokeAsync(() =>
                {
                    _declineMessage = declineMessage;
                    StateHasChanged();

                    // Stop and reset the timer if it's already running
                    if (_resetTimer != null)
                    {
                        _resetTimer.Stop();
                        _resetTimer.Start();
                    }
                    else
                    {
                        _resetTimer = new Timer(4000);
                        _resetTimer.Elapsed += (sender, e) =>
                        {
                            InvokeAsync(() =>
                            {
                                _declineMessage = "";
                                StateHasChanged();
                            });
                            // Stop the timer as it's no longer needed
                            _resetTimer.Stop();
                        };
                        _resetTimer.AutoReset = false;
                        _resetTimer.Start();
                    }
                });
        });
        await hubConnection.StartAsync();
    }
    private async Task JoinGameRoom()
    {
        // add validation to the input text field
        Player currentPlayer = _playerRepository.GetById(_userId);
        await hubConnection.SendAsync("JoinRoom", _roomId, currentPlayer);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
        _resetTimer?.Dispose();
    }

    public void Dispose()
    {
        hubConnection?.DisposeAsync();
        _resetTimer?.Dispose();
    }
}
