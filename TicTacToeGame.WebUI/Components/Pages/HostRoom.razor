@page "/host-room"
@using Microsoft.AspNetCore.SignalR.Client

@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using System.Timers
@using System.Diagnostics
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.WebUI.Services;
@using TicTacToeGame.WebUI.Services.RoomBackgroundServices

@inject NavigationManager _navigationManager
@inject RoomRepository _roomRepository
@inject GameRepository _gameRepository
@inject PlayerRepository _playerRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@* @inject RoomService _roomService *@
@inject RoomBackgroundService _roomBackgroundService

@rendermode InteractiveServer
@implements IDisposable



<h3>HostRoom</h3>
@if (isLoading)
{
    <h2>Loading...</h2>
}

@if (isTimerElapsed)
{
    <div class="container">
        <div class="row d-flex align-items-center">
            <div class="col-7">
                <div class="alert alert-secondary">Time of your room Id has run out</div>
            </div>
            <div class="col-3">
                <input type="button" class="btn btn-primary" value="Refresh" @onclick="InitializeRoom" />
            </div>
        </div>
    </div>
}

<h4>Room Id: @_connectionId</h4>
<h4>@waitingTime</h4>
@code {
    // TODO:
    // - Add validation if user if authorized and if not redirect to login page

    // Room
    //private static Dictionary<Room, Timer> rooms = new();
    private string _connectionId;

    // Timer
    private bool isTimerElapsed = false;

    // HubConnection
    private HubConnection hubConnection;

    // Stopwatch
    private Timer stopwatchtimer;
    private int waitingTime;// 30 seconds

    private bool isLoading = false;

    private void InitializeRoom()
    {
        isTimerElapsed = false;
        waitingTime = 10;
        stopwatchtimer = new Timer(1000);
        stopwatchtimer.AutoReset = true;
        stopwatchtimer.Elapsed += (sender, e) =>
        {
            waitingTime--;
            InvokeAsync(StateHasChanged);
            if (waitingTime == 0)
            {
                stopwatchtimer.Stop();
                stopwatchtimer.Dispose();
                isTimerElapsed = true;
                InvokeAsync(StateHasChanged);
            }
        };
        stopwatchtimer.Start();

        Room room = new Room()
            {
                ConnectionId = new Random().Next(100_000, 1_000_000),
                IsOpen = true
            };
        _connectionId = room.ConnectionId.ToString();

        _roomBackgroundService.OnRoomDeleted = () =>
       {
           isTimerElapsed = true;
           InvokeAsync(StateHasChanged);
       };

        _roomBackgroundService.AddRoom(room, () =>
       {
           isTimerElapsed = true;
           InvokeAsync(StateHasChanged);
       });
    }

    protected override async Task OnInitializedAsync()
    {
        InitializeRoom();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        hubConnection.On<int, Player>("JoinRoom", async (joinedRoomId, joinPlayer) =>
        {
            if (_roomBackgroundService.OpenedRooms.Keys.Any(r => r.ConnectionId == joinedRoomId && r.IsOpen))
            {
                if (_connectionId == joinedRoomId.ToString())
                {
                    Room room = _roomBackgroundService.OpenedRooms.Keys.First(r => r.ConnectionId == joinedRoomId);
                    // add Room to db
                    room.IsOpen = false;
                    int roomId = _roomRepository.AddEntity(room);

                    // maybe add some manager that adds rooms to some list with timer and after some time deletes them

                    AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
                    ClaimsPrincipal? user = authState.User;

                    // add checking if user is null
                    TicTacToeGame.Domain.Models.Game game = new()
                    {
                            PlayerHostId = user.Claims.First().Value.ToString(),
                            PlayerGuestId = joinPlayer.Id,
                            RoomId = roomId,
                            GameResult = GameState.Starting,
                            CurrentTurn = PlayerType.Host
                    };

                    _gameRepository.AddEntity(game);
                    await hubConnection.SendAsync("JoinGame", game.UniqueId);

                    await hubConnection.SendAsync("AcceptJoining", room.ConnectionId, game.UniqueId);
                    _navigationManager.NavigateTo("/game");

                    await InvokeAsync(() =>
                         {
                             isLoading = true;
                             StateHasChanged();
                         });
                    // maybe update player type

                    // connect game to room
                    // Add Game to db
                    // add host to db
                    // add guest to db
                }
            }
            else
            {
                await hubConnection.SendAsync("DeclineJoining", "Such connection Id is not right");
            }
        });
        await hubConnection.StartAsync();
    }
    public void Dispose()
    {
        hubConnection.DisposeAsync();
    }
}
