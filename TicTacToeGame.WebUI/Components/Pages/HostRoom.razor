@page "/host-room"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using System.Timers
@using System.Diagnostics
@using TicTacToeGame.Domain.Constants
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.GameProcessService
@using TicTacToeGame.Services.HubConnections
@using TicTacToeGame.Services.RoomServices
@using TicTacToeGame.WebUI.Hubs

@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject RoomManagerService _roomService
@inject TemporaryRoomService _temporaryRoomService
@inject HostRoomHubConnection HostRoomHubConnection
@inject PlayerRepository _playerRepository
@inject GameReconnectingService _reconnectService

@rendermode InteractiveServer
@implements IAsyncDisposable

@attribute [Authorize]

<section style="height:100vh; background-color: #f2f2f2;" class="d-flex justify-content-center align-items-center">
    <div class="card p-5 w-75">
        <div class="d-flex justify-content-left">
            <input type="button" class="btn btn-primary" value="Go To Home" @onclick="GoToHome" />
        </div>
        <div class="top-row d-flex justify-content-end">
            <a href="join-room">Enter Code</a>
        </div>
        <h3 class="text-center">HostRoom</h3>
        @if (isLoading)
        {
            <div class="text-center">
                <h2>Loading...</h2>s
            </div>
        }
        else
        {
            <div class="text-center">
                <p>Waiting for another player to join...</p>
            </div>
        }
            <div class="text-center">
                <p class="text-danger">@errorMessage</p>
            </div>
        @if (_temporaryRoomService.IsTimerElapsed)
        {
            <div class="container">
                <div class="row d-flex align-items-center justify-content-center">
                    <div class="col-7 d-flex align-items-center">
                        <div class="alert alert-secondary">Time of your room Id has run out</div>
                    </div>
                    <div class="col-3 d-flex align-items-center">
                        <input type="button" class="btn btn-primary" value="Refresh" @onclick="InitializeRoom" />
                    </div>
                </div>
            </div>
        }

        <h4 class="text-center">Room Id: @_temporaryRoomService.ConnectionId</h4>
        <h4 class="text-center">@_temporaryRoomService.WaitingTime</h4>
    </div>
</section>

@code {
    private bool isLoading = false;

    private AuthenticationState authState;

    private ClaimsPrincipal? user;

    private string errorMessage = "";

    private void InitializeRoom()
    {
        _temporaryRoomService.CreateRoom();

        _roomService.OnRoomDeleted = async () =>
       {
           _temporaryRoomService.IsTimerElapsed = true;
           await InvokeAsync(StateHasChanged);
       };

        _roomService.AddRoom(_temporaryRoomService.Room, async () =>
       {
           _temporaryRoomService.IsTimerElapsed = true;
           await InvokeAsync(StateHasChanged);
       });
    }

    private void GoToHome()
    {
        _navigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user == null)
        {
            throw new Exception("User is not authorized");
        }

        _temporaryRoomService.UpdateComponent += async () => await InvokeAsync(StateHasChanged);

        HostRoomHubConnection.JoinRoomEvent += JoinRoom;

        await HostRoomHubConnection.StartConnectionAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (_temporaryRoomService.ConnectionId == HostRoomConstants.LOADING_MESSAGE)
            {
                InitializeRoom();
            }
        }
    }

    private void JoinRoom(int joinedRoomId, Player joinedPlayer)
    {
        JoinRoomAsync(joinedRoomId, joinedPlayer).GetAwaiter().GetResult();
    }

    private async Task JoinRoomAsync(int joinedRoomId, Player joinPlayer)
    {
        bool isSuchRoomExist = _roomService.IsSuchRoomExist(joinedRoomId);

        if (!isSuchRoomExist)
        {
            await HostRoomHubConnection.DeclineJoining("Such connection Id is not right", joinPlayer.Id);
            return;
        }

        bool isItCurrentRoom = _temporaryRoomService.CheckIfItIsCurrentRoom(joinedRoomId);

        if (isItCurrentRoom)
        {
            bool isCurrentUserHostPlaying = IsUserAlreadyPlaying(GetCurrentUserId());
            
            if(isCurrentUserHostPlaying)
            {
                errorMessage = "You are already playing";
                await HostRoomHubConnection.DeclineJoining("Another player are already playing", joinPlayer.Id);
                // add displaying message for host
                return;
            }

            bool isCurrentUserGuestPlaying = IsUserAlreadyPlaying(joinPlayer.Id);

            if(isCurrentUserGuestPlaying)
            {
                await HostRoomHubConnection.DeclineJoining("You are already playing", joinPlayer.Id);
                return;
            }
            

            int createdRoomId = _roomService.CreateGame(joinedRoomId, user, joinPlayer);

            if (createdRoomId == -1)
            {
                await HostRoomHubConnection.DeclineJoining("You can`t play with yourself", joinPlayer.Id);
                return;
            }


            await HostRoomHubConnection.JoinGame(createdRoomId);

            await HostRoomHubConnection.AcceptJoining(_temporaryRoomService.Room.ConnectionId, createdRoomId);

            _navigationManager.NavigateTo("/game");

            _ = InvokeAsync(() =>
            {
                isLoading = true;
                StateHasChanged();
            });
        }
    }
    public bool IsUserAlreadyPlaying(string userId) => _reconnectService.CheckIfPlayerIsPlayingAndHasGame(userId);
   
    public string GetCurrentUserId() =>  user?.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;

    //public string GetPlayersId() => user.FindFirstValue(ClaimTypes.NameIdentifier);

    public async ValueTask DisposeAsync()
    {
        await HostRoomHubConnection.DisposeAsync();
    }
}
