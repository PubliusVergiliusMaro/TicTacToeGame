@page "/host-room"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using TicTacToeGame.Domain.Repositories


@inject NavigationManager _navigationManager
@inject RoomRepository _roomRepository
@inject GameRepository _gameRepository
@inject PlayerRepository _playerRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@rendermode InteractiveServer
@implements IDisposable
<h3>HostRoom</h3>

<h4>Room Id: @room.ConnectionId</h4>

@code {
    // TODO:
    // - Add validation if user if authorized and if not redirect to login page


    // Room
    private static Room room;

    // HubConnection
    private HubConnection hubConnection;


    protected override async Task OnInitializedAsync()
    {
        room = new Room()
        {
           ConnectionId = new Random().Next(100_000, 1_000_000),
           IsOpen = true
        };

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        hubConnection.On<int, Player>("JoinRoom", async (joinedRoomId, joinPlayer) =>
        {
            if (room.IsOpen)
            {
                if (room.ConnectionId == joinedRoomId)
                {
                    // add Room to db
                    int roomId = _roomRepository.AddEntity(room); 

                    // maybe add some manager that adds rooms to some list with timer and after some time deletes them

                    AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
                    ClaimsPrincipal? user = authState.User;

                    // add checking if user is null
                    TicTacToeGame.Domain.Models.Game game = new()
                    {
                        PlayerHostId = user.Claims.First().Value.ToString(),
                        PlayerGuestId = joinPlayer.Id,
                        RoomId = roomId,
                        GameResult = GameState.InProgress,
                        CurrentTurn = PlayerType.Host
                    };

                    _gameRepository.AddEntity(game);
                    await hubConnection.SendAsync("AcceptJoining", room.ConnectionId, null);
                    _navigationManager.NavigateTo("/game");
                    // maybe update player type

                    // connect game to room
                    // Add Game to db
                    // add host to db
                    // add guest to db

                }
            }
        });
        await hubConnection.StartAsync();
    }

    public void Dispose()
    {
        hubConnection?.DisposeAsync();
    }
}
