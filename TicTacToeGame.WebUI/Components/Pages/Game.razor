@page "/game"

@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeGame.Domain.Constants
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using System.Security.Claims
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.GameProcessService
@using TicTacToeGame.Services.GamesStatisticServices
@using TicTacToeGame.Services.HubConnections
@using TicTacToeGame.WebUI.Components.Account
@using TicTacToeGame.WebUI.Hubs

@inject PlayerRepository _playerRepository
@inject GameRepository GameRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavigationManager
@inject GameInitializeService GameInitializeProcess
@inject CheckForWinnerManager CheckForWinnerManager
@inject MakeMovesGameManager MakeMovesManager
@inject PlayerDisconectingTrackingService DisconectingTrackingService
@inject GameChatService ChatService
@inject GameReconnectingService GameReconnectingService
@inject GamesStatisticsService GamesStatisticsService
@inject GameSessionService GameSessionService
@inject GameHubConnection GameHubConnection
@inject GameManager GameManager

@implements IAsyncDisposable
@rendermode InteractiveServer

@if (GameManager.IsInitialized)
{

    <h1 style="text-align: center;">Tic Tac Toe Game</h1>
    @if (DisconectingTrackingService.OpponentLeaved)
    {
        <h3 style="text-align: center;">Opponent @DisconectingTrackingService.LivedPlayerName leaves game</h3>
    }

    <div class="xED3T" style="display: flex; flex-direction: column; align-items: center; padding: 20px; background-color: #14bdac;">
        <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            You`re @MakeMovesManager.CurrentPlayerSign;
        </p>
        <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            @CheckForWinnerManager.GameStatus
        </p>
        <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            Current turn now: @MakeMovesManager.DetermineWhoMakeMoveNow().ToString();
        </p>
        <table jsname="z2IlVe" class="KD6xlc" style="border-collapse: separate; border-spacing: 10px;">
            <tbody>
                @for (int row = TicTacToeRules.FIRST_ROW_OF_BOARD; row < TicTacToeRules.MAX_COUNT_OF_BOARD_ROWS; row++)
                {
                    <div style="display: flex;">
                        @for (int col = TicTacToeRules.FIRST_COLUMN_OF_BOARD; col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS; col++)
                        {
                            int index = row * 3 + col;
                            <button style="width: 100px; height: 100px; font-size: 48px; text-align: center; vertical-align: middle;
                                background-color: #14bdac; border: none; color: #fff;"
                                    @onclick="(async () => await MakeMove(index))" disabled="@IsButtonDisabled(index)">
                                @GetSquareValue(index)
                            </button>
                            @if (col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS - 1)
                            {
                                <div style="width: 5px; background-color: #70757a; height: 100px; "></div>
                            }
                        }
                    </div>
                    @if (row < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS - 1)
                    {
                        <div style="height: 5px; background-color: #70757a; width: 100%; "></div>
                    }
                }
            </tbody>
        </table>
        @if (GameSessionService.RequestForNextGame)
        {
            @if (!GameSessionService.ApprovedNextGame && !GameSessionService.DeclinedNextGame)
            {
                <div class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">Game Invitation</h5>
                        <p class="card-text">You have been invited to another game. Do you accept?</p>
                        <button class="btn btn-success" @onclick="Approve">Approve</button>
                        <button class="btn btn-danger" @onclick="Decline">Decline</button>
                    </div>
                </div>
            }
        }
        @if (GameSessionService.ApprovedNextGame)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Game Invitation was accepted</h5>
                    <p class="text-success"><i class="fas fa-check"></i> Game approved</p>
                </div>
            </div>
        }
        else if (GameSessionService.DeclinedNextGame)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Game Invitation was declined</h5>
                    <p class="text-danger"><i class="fas fa-times"></i> Game declined</p>
                </div>
            </div>
        }
    </div>

    <div class="d-flex">
        @if (GameManager.CurrentGame.GameResult == GameState.Finished)
        {
            <button style="margin-top: 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                    @onclick="GoToHomePage">
                Go to Home Page
            </button>

            <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                    @onclick="PlayNextGame">
                Send ask to another game
            </button>
        }
        @if (ChatService.IsReceivedNewMessage == true)
        {
            <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: orangered; color: #fff; border: none; cursor: pointer;"
                    @onclick="ChatService.ToggleChat">
                Chat
            </button>
        }
        else
        {
            <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                    @onclick="ChatService.ToggleChat">
                Chat
            </button>
        }
    </div>

    @if (gamesHistory.Games.Count != 0)
    {
        <div class="scoreboard-container" style="display: flex; flex-direction: column; justify-content: center; align-items: center; margin: 10px 0;">
            <div class="scoreboard" style="text-align: center; background-color: #f0f0f0; padding: 20px; border-radius: 10px;">
                <h4 class="scoreboard-header" style="margin-bottom: 10px;">Games played: @gamesHistory.Games.Count</h4>

                <div class="scoreboard-players" style="display: flex; justify-content: center; align-items: center;">
                    <div class="scoreboard-player" style="display: flex; flex-direction: column; margin: 0 10px;">
                        <span class="scoreboard-username" style="font-size: 1.2em;">@GameManager.CurrentPlayerHost.UserName</span>
                        <span class="scoreboard-score" style="font-size: 1.5em; font-weight: bold;">@hostWins</span>
                    </div>

                    <div class="scoreboard-divider" style="font-size: 1.5em; margin: 0 5px;">:</div>

                    <div class="scoreboard-player" style="display: flex; flex-direction: column; margin: 0 10px;">
                        <span class="scoreboard-username" style="font-size: 1.2em;">@GameManager.CurrentPlayerGuest.UserName</span>
                        <span class="scoreboard-score" style="font-size: 1.5em; font-weight: bold;">@guestWins</span>
                    </div>
                </div>

                <h3 class="scoreboard-tie" style="color: orange; margin-top: 10px;">Tie @(gamesHistory.Games.Count - (hostWins + guestWins))</h3>
            </div>
        </div>


        @foreach (var game in gamesHistory.Games)
        {
            string cardColorClass = "";
            Player winner = GamesStatisticsService.GetWinner(game.Winner, GameManager.CurrentPlayerHost, GameManager.CurrentPlayerGuest);
            bool hostWon = (winner != null && winner.Id == GameManager.CurrentPlayerHost.Id);
            bool guestWon = (winner != null && winner.Id == GameManager.CurrentPlayerGuest.Id);
            bool isDraw = (winner == null);
            if (GameManager.GetCurrentUserId() == GameManager.CurrentPlayerHost.Id)
            {
                cardColorClass = hostWon ? "bg-success" : guestWon ? "bg-danger" : isDraw ? "bg-warning" : "";
            }
            else
            {
                cardColorClass = hostWon ? "bg-danger" : guestWon ? "bg-success" : isDraw ? "bg-warning" : "";

            }
            <div class="card m-1 @cardColorClass">
                <div class="card-body">
                    <div class="card m-1">
                        <div class="card-body">
                            <h5 class="card-title">
                                @(isDraw ? "Draw" : $"Winner: {winner.UserName}")
                                @{
                                    string.Format("{0} ({1}) : {2} ({3})", GameManager.CurrentPlayerHost.UserName, hostWins, GameManager.CurrentPlayerGuest.UserName, guestWins);
                                }
                            </h5>
                            <p class="card-text">@game.CreatedAt.ToString("D")</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    @if (ChatService.IsChatVisible)
    {
        <div style="position: fixed; bottom: 0; right: 0; width: 300px; height: 400px; border: 1px solid #ccc; padding: 10px; margin: 10px; background-color: #f9f9f9;">
            <div class="d-flex justify-content-between">
                <h3>Chat</h3>
                <button style="margin:0px 0px 5px 0px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                        @onclick="ChatService.ToggleChat">
                    Toggle Chat
                </button>
            </div>
            <div style="height: 80%; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; word-wrap: break-word;">
                @foreach (var chatmsg in ChatService.ChatMessages)
                {
                    <p><strong>@chatmsg.Key:</strong> @chatmsg.Value</p>
                }
            </div>
            <input @bind="ChatService.Message" @oninput="UpdateSendButton" type="text" style="width: 70%; padding: 5px;" placeholder="Type your message here..." />
            <button 
                @onclick="SendMessage" 
                disabled="@string.IsNullOrEmpty(ChatService.Message)" style="width: 28%; padding: 5px 10px; 
                background-color: @(string.IsNullOrEmpty(ChatService.Message) ? "#ccc" : "#14bdac"); color: #fff; border: none; cursor: pointer;">Send</button>
        </div>
    }
}

@code {

    private GamesHistory gamesHistory = new GamesHistory();
   
    private bool isInitialized = false;

    int hostWins = 0;
    int guestWins = 0;

    private bool isGameInitializedSuccesfully = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized)
        {
            isInitialized = true;
            
            CheckForWinnerManager.GameStatus = "Game in progress";

            isGameInitializedSuccesfully = await GameInitializeProcess.InitializeGameForAuthenticatedUser();

            if (!isGameInitializedSuccesfully)
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            else
            {
                try
                {
                    GameHubConnection.SendGameStateEvent += MakeMovesManager.SendGameState;

                    GameHubConnection.SendGameStatusEvent += CheckForWinnerManager.SendGameStatus;

                    GameHubConnection.OpponentLeftEvent += DisconectingTrackingService.OpponentLeft;

                    GameHubConnection.AskAnotherPlayerBoardEvent += MakeMovesManager.AskAnotherPlayerBoard;

                    GameHubConnection.SendAnotherPlayerBoardEvent += MakeMovesManager.SendAnotherPlayerBoard;

                    GameHubConnection.OpponentLeavesEvent += DisconectingTrackingService.OpponentLeaves;

                    GameHubConnection.CheckIfOpponentLeavesEvent += DisconectingTrackingService.CheckIfOpponentLeaves;

                    GameHubConnection.OpponentNotLeavesEvent += DisconectingTrackingService.OpponentNotLeaves;

                    GameHubConnection.ReceiveChatMessageEvent += ChatService.AddMessage;

                    GameHubConnection.AskAnotherPlayerForNextGameEvent += GameSessionService.AskAnotherPlayerForNextGame;

                    GameHubConnection.DeclineAnotherGameRequestEvent += GameSessionService.DeclineAnotherGameRequest;

                    GameHubConnection.AcceptAnotherGameRequestEvent += GameSessionService.AcceptAnotherGameRequest;

                    GameHubConnection.JoinNextGameEvent += GameSessionService.JoinNextGame;

                    await GameHubConnection.StartConnectionAsync();
                }
                catch (Exception ex)
                {
                    if (!GameInitializeProcess.IsPlayerAlreadyPlaying)
                    {
                        GameReconnectingService.MakePlayerNotPlaying(GameManager.GetCurrentUserId());
                        GameManager.CurrentPlayer.IsPlaying = false;
                    }
                    return;
                }

                try
                {
                    await GameHubConnection.JoinGame((int)GameManager.CurrentGame.RoomId);
                }

                catch (Exception)
                {

                    return;
                }

                GameManager.UpdateCurrentPlayerGameConnectionId(GameHubConnection.GetConnectionId());

                DisconectingTrackingService.InitializeTimers();

                MakeMovesManager.InitializePlayers();

                DisconectingTrackingService.StateHasChanged += () => InvokeAsync(StateHasChanged);

                MakeMovesManager.StateHasChanged += () => InvokeAsync(StateHasChanged);

                ChatService.StateHasChanged += () => InvokeAsync(StateHasChanged);

                GameSessionService.StateHasChanged += () => InvokeAsync(StateHasChanged);

                CheckForWinnerManager.StateHasChanged += () => InvokeAsync(StateHasChanged);

                await GameHubConnection.AskAnotherPlayerBoard((int)GameManager.CurrentGame.RoomId, GameManager.CurrentPlayer.Id);

                // Refactor
                GameSessionService.IsTwoPlayersPlaying = await GameManager.IsTwoPlayersPlaying();
                //

                gamesHistory.Games = GetGamesByResultAndPlayers();

                StateHasChanged();
            }
        }
    }

    private async Task Approve() => await GameSessionService.ApproveNextGamePlayerRequest();

    private async Task Decline() => await GameSessionService.DeclineNextPlayerRequest();

    private async Task PlayNextGame() => await GameSessionService.PlayNextGame();

    public List<TicTacToeGame.Domain.Models.Game> GetGamesByResultAndPlayers()
    {
        var gamesList = GameRepository.GetGameHistoryInSession(GameState.Finished, GameManager.CurrentPlayerHost.Id,
            GameManager.CurrentPlayerGuest.Id, GameManager.CurrentGame.RoomId);
        hostWins = gamesList.Count(game => game.Winner == PlayerType.Host);
        guestWins = gamesList.Count(game => game.Winner == PlayerType.Guest);
        return gamesList;

    }

    private async Task MakeMove(int index)
    {
        DisconectingTrackingService.ReloadMoveTimer();
        await MakeMovesManager.MakeMove(index);
    }

    private string GetSquareValue(int index) => (GameManager.Board[index] == BoardElements.Empty) ? "" : GameManager.Board[index].ToString();
    
    private bool IsButtonDisabled(int index) => GameManager.CurrentGame.GameResult == GameState.Finished;

    private void GoToHomePage() => NavigationManager.NavigateTo("/");

    private async Task SendMessage()
    {
        await ChatService.SendMessage(ChatService.Message);
        ChatService.Message = "";
    }
    void UpdateSendButton(ChangeEventArgs e) => ChatService.Message = e.Value.ToString();

    public async ValueTask DisposeAsync()
    {
        if (isGameInitializedSuccesfully)
        {
            GameReconnectingService.MakePlayerNotPlaying(GameManager.GetCurrentUserId());
            GameManager.CurrentPlayer.IsPlaying = false;
 
            DisconectingTrackingService.UpdateGameResultAfterTwoPlayersDisconnection();

            DisconectingTrackingService._moveTimer?.Dispose();
            DisconectingTrackingService._responseTimer?.Dispose();
            await GameHubConnection.DisposeAsync();
        }
    }
}