@page "/game"

@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeGame.Domain.Constants
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using System.Security.Claims
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.GameProcessService
@using TicTacToeGame.Services.GamesStatisticServices
@using TicTacToeGame.WebUI.Components.Account
@using TicTacToeGame.WebUI.Hubs

@inject PlayerRepository _playerRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject GameInitializeProcess GameInitializeProcess
@inject CheckForWinnerManager CheckForWinnerManager
@inject MakeMovesGameManager MakeMovesGameManager
@inject PlayerDisconectingTrackingService DisconectingTrackingService
@inject GameChatService ChatService
@inject GameReconnectingService GameReconnectingService
@inject GameRepository GameRepository
@implements IDisposable
@rendermode InteractiveServer

<h1 style="text-align: center;">Tic Tac Toe Game</h1>
@if (DisconectingTrackingService.OpponentLeaved)
{
    <h3 style="text-align: center;">Opponent @DisconectingTrackingService.LivedPlayerName leaves game</h3>
}
<div class="xED3T" style="display: flex; flex-direction: column; align-items: center; padding: 20px; background-color: #14bdac;">
    <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        @{

        }
        @GameStatus
    </p>
    <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        Current turn now: @MakeMovesGameManager.DetermineWhoMakeMoveNow(CurrentGame).ToString();
    </p>
    <table jsname="z2IlVe" class="KD6xlc" style="border-collapse: separate; border-spacing: 10px;">
        <tbody>
            @for (int row = TicTacToeRules.FIRST_ROW_OF_BOARD; row < TicTacToeRules.MAX_COUNT_OF_BOARD_ROWS; row++)
            {
                <div style="display: flex;">
                    @for (int col = TicTacToeRules.FIRST_COLUMN_OF_BOARD; col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS; col++)
                    {
                        int index = row * 3 + col;
                        <button style="width: 100px; height: 100px; font-size: 48px; text-align: center; vertical-align: middle;
                                background-color: #14bdac; border: none; color: #fff;"
                                @onclick="(async () => await MakeMove(index))" disabled="@IsButtonDisabled(index)">
                            @GetSquareValue(index)
                        </button>
                        @if (col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS - 1)
                        {
                            <!-- This div will create a vertical separator between buttons -->
                            <div style="width: 5px; background-color: #70757a; height: 100px; "></div>
                        }
                    }
                </div>
                @if (row < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS - 1)
                {
                    <!-- This div will create a vertical separator between buttons -->
                    <div style="height: 5px; background-color: #70757a; width: 100%; "></div>
                }
            }
        </tbody>
    </table>
</div>

<div class="d-flex">

    @if (CurrentGame.GameResult == GameState.Finished)
    {
        <button style="margin-top: 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                @onclick="GoToHomePage">
            Go to Home Page
        </button>
    }
    <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
            @onclick="ChatService.ToggleChat">
        Toggle Chat
    </button>
</div>

@if (ChatService._isChatVisible)
{
    <div style="position: fixed; bottom: 0; right: 0; width: 300px; height: 400px; border: 1px solid #ccc; padding: 10px; margin: 10px; background-color: #f9f9f9;">
        <h3>Chat</h3>
        <div style="height: 80%; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; word-wrap: break-word;">
            @foreach (var chatmsg in ChatService.ChatMessages)
            {
                <p><strong>@chatmsg.Key:</strong> @chatmsg.Value</p>
            }
        </div>
        <input @bind="message" @oninput="UpdateSendButton" type="text" style="width: 70%; padding: 5px;" placeholder="Type your message here..." />
        <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(message)" style="width: 28%; padding: 5px 10px; background-color: @(string.IsNullOrEmpty(message) ? "#ccc" : "#14bdac"); color: #fff; border: none; cursor: pointer;">Send</button>
    </div>
}
<script src="_content/TicTacToeDeployWithReloadPage/interopFunctions.js"></script>

@code {

    // Board
    private BoardElements[] board = new BoardElements[TicTacToeRules.BOARD_SIZE];

    // For checking current move number
    // Display who win
    // Are using in signalR
    private string GameStatus = "";
    private string gameId = "";

    // Current game
    private TicTacToeGame.Domain.Models.Game CurrentGame = new();
    private Player currentPlayerHost;
    private Player currentPlayerGuest;

    // SignalR
    private HubConnection hubConnection;

    // Authentication data
    private AuthenticationState authState;
    private ClaimsPrincipal? user;

    // Chat
    string message = "";
    private bool isInitialized = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized)
        {
            isInitialized = true;
            GameStatus = "Game in progress";
            user = await GameInitializeProcess.HandleGameForAuthenticatedUser(authState);
            CurrentGame = GameInitializeProcess.CurrentGame;
            if (CurrentGame is null)
            {
                return;
            }
        
            currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
            currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri(GameHub.HubUrl))
                .Build();

            hubConnection.On<BoardElements[], PlayerType, Guid>("SendGameState", (receivedBoard, nextPlayerTurn, gameId) =>
            {
                InvokeAsync(() =>
                {
                    board = receivedBoard;
                    CurrentGame.CurrentTurn = nextPlayerTurn;
                    MakeMovesGameManager.UpdateGameAfterMove(CurrentGame);
                    StateHasChanged();
                });
            });
            hubConnection.On<GameState, string, Guid>("SendGameStatus", (receiveGameResult, receiveGameStatus, gameId) =>
            {
                InvokeAsync(() =>
                {
                    CurrentGame.GameResult = receiveGameResult;
                    GameStatus = receiveGameStatus;
                    StateHasChanged();
                });
            });
            ///
            hubConnection.On("OpponentLeft", () =>
            {
                InvokeAsync(() =>
                {
                    DisconectingTrackingService.OpponentLeaved = true;
                    GameStatus = "Game Over";
                    StateHasChanged();
                });
            });
            hubConnection.On<string, Guid>("AskAnotherPlayerBoard", async (userId, gameId) =>
            {
                string currentUserId = DisconectingTrackingService.CurrentPlayer.Id;
                if (userId != currentUserId)
                    await hubConnection.SendAsync("SendAnotherPlayerBoard", CurrentGame.UniqueId, currentUserId, board);
            });
            hubConnection.On<string, BoardElements[]>("SendAnotherPlayerBoard", (userId, playerBoard) =>
             {
                 InvokeAsync(() =>
                 {
                     if (userId != DisconectingTrackingService.CurrentPlayer.Id)
                     {
                         board = playerBoard;
                         StateHasChanged();
                     }
                 });
             });
            ///
            DisconectingTrackingService.SetHubConnection(hubConnection);

            ChatService.SetHubConnection(hubConnection);

            await hubConnection.StartAsync();

            await hubConnection.SendAsync("JoinGame", CurrentGame.UniqueId);

            UpdatePlayersGameData(hubConnection.ConnectionId);

            DisconectingTrackingService.InitizalisePlayers(currentPlayerHost, currentPlayerGuest, user);

            DisconectingTrackingService.InitializeGame(CurrentGame);

            DisconectingTrackingService.InitializeTimers();

            DisconectingTrackingService.UpdateComponent += () => InvokeAsync(StateHasChanged);

            MakeMovesGameManager.InitializePlayers(currentPlayerHost, currentPlayerGuest, hubConnection);

            ChatService.SetSender(CurrentGame, DisconectingTrackingService.CurrentPlayer);

            ChatService.UpdateComponent += () => InvokeAsync(StateHasChanged);

            await hubConnection.SendAsync("AskAnotherPlayerBoard", CurrentGame.UniqueId, DisconectingTrackingService.CurrentPlayer.Id);
            StateHasChanged();
        }
    }
    private void UpdatePlayersGameData(string connectionId)
    {
        _playerRepository.UpdatePlayerGameContextId(connectionId, currentPlayerHost, currentPlayerGuest, user);

        currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
        currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);
    }

    private async Task MakeMove(int index)
    {
        DisconectingTrackingService.ReloadMoveTimer();
        await MakeMovesGameManager.MakeMove(index, board, CurrentGame, authState, user);
    }


    private string GetSquareValue(int index)
    {
        return (board[index] == BoardElements.Empty) ? "" : board[index].ToString();
    }

    private bool IsButtonDisabled(int index)
    {
        return CurrentGame.GameResult == GameState.Finished;
    }

    private void GoToHomePage()
    {
        NavigationManager.NavigateTo("/");
    }

    async Task SendMessage() => await ChatService.SendMessage(message);
    void UpdateSendButton(ChangeEventArgs e) => message = e.Value.ToString();

    public async void Dispose()
    {
        if (user != null)
        {
            string userId = user.Claims.First().Value.ToString();
            GameReconnectingService.MakePlayerNotPlaying(userId);
        }        
        currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
        currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);
        if (currentPlayerGuest is not null && currentPlayerHost is not null)
        {
            if (!currentPlayerGuest.IsPlaying && !currentPlayerHost.IsPlaying)
            {
                CurrentGame = GameRepository.GetById(CurrentGame.Id);
                CurrentGame.GameResult = GameState.Finished;
                GameRepository.UpdateEntity(CurrentGame);
            }
        }
        
        DisconectingTrackingService._moveTimer?.Dispose();
        DisconectingTrackingService._responseTimer?.Dispose();
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }
}