@page "/game"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Services.GameProcessService
@using TicTacToeGame.Services.GamesStatisticServices
@using TicTacToeGame.Services.HubConnections
@using TicTacToeGame.WebUI.Components.GameComponents

@inject NavigationManager NavigationManager
@inject GameInitializeService GameInitializeProcess
@inject CheckForWinnerManager CheckForWinnerManager
@inject MakeMovesGameManager MakeMovesManager
@inject PlayerDisconectingTrackingService DisconectingTrackingService
@inject GameChatService ChatService 
@inject GameReconnectingService GameReconnectingService
@inject GamesStatisticsService GamesStatisticsService
@inject GameSessionService GameSessionService
@inject GameHubConnection GameHubConnection
@inject GameManager GameManager
@inject GameBoardManager GameBoardManager
@inject ILogger<Game> Logger

@implements IAsyncDisposable

@rendermode InteractiveServer

@attribute [Authorize]


@if (GameManager.IsInitialized)
{
    <h1 style="text-align: center;">Tic Tac Toe Game</h1>
    @if (DisconectingTrackingService.OpponentLeaved)
    {
        <h3 style="text-align: center;">Opponent @DisconectingTrackingService.LivedPlayerName leaves game</h3>
    }

    @if (!DisconectingTrackingService.isReceivedConnectedStatus)
    {
        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 9; background-color: rgba(0, 0, 0, 0.5); pointer-events: all;"></div>

        <div style="position:fixed;top: 50%;left: 50%;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);z-index: 11;">
            @if (!DisconectingTrackingService.IsWaitingTimeUp)
            {
                <div style="background:azure;padding:10px;">
                    Waiting another player...
                </div>
                <div style="background:azure;padding:10px;">
                    @DisconectingTrackingService.WaitingTime
                </div>
            }
            else
            {
                <div style="background:azure;padding:10px;">
                    Waiting another player time has run out
                </div>
            }
        </div>
    }

    <GameBoard  GameHubConnection="GameHubConnection" 
                CheckForWinnerManager="CheckForWinnerManager"
                MakeMovesManager="MakeMovesManager"
                DisconectingTrackingService="DisconectingTrackingService"
                GameSessionService="GameSessionService"
                GameManager="GameManager"/>

    <div class="d-flex">
        @if (GameManager.CurrentGame.GameResult == GameState.Finished)
        {
            @if (!GameSessionService.RequestForNextGame)
            {
                <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                        @onclick="PlayNextGame">
                    Send ask to another game
                </button>
            }
        }
        @if (ChatService.IsReceivedNewMessage == true)
        {
            <button id="chatButton" style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: orangered; color: #fff; border: none; cursor: pointer;"
                    @onclick="ChatService.ToggleChat">
                Chat
            </button>
        }
        else
        {
            <button id="chatButton" style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                    @onclick="ChatService.ToggleChat">
                Chat
            </button>
        }
        <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #ff6347; color: #fff; border: none; cursor: pointer; z-index:10;" @onclick="LeaveGame">
            Leave Game
        </button>
    </div>

    <SessionHistory GameManager="GameManager" GamesStatisticsService="GamesStatisticsService" />

    <Chat ChatService="ChatService" GameManager="GameManager" />
}
else
{
    <div style="display: flex;justify-content: center;align-items: center;height: 100vh;">
        <div class="loader"></div>
    </div>
}


@code {

    private bool isInitialized = false;

    private bool isGameInitializedSuccesfully = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized)
        {
            isInitialized = true;

            CheckForWinnerManager.GameStatus = "Game in progress";

            Logger.LogError("Before Initialization");

            isGameInitializedSuccesfully = await GameInitializeProcess.InitializeGameForAuthenticatedUser();

            Logger.LogError("After Initialization");

            if (!isGameInitializedSuccesfully)
            {
                Logger.LogError("Player Kicks");
                NavigationManager.NavigateTo("/");
                return;
            }
            else
            {
                GameHubConnection = new GameHubConnection(NavigationManager);

                await InitializeGameHubConnection();

                DisconectingTrackingService.SetHubConnection(GameHubConnection);

                ChatService.SetHubConnection(GameHubConnection);

                MakeMovesManager.SetHubConnection(GameHubConnection);

                GameSessionService.SetHubConnection(GameHubConnection);

                bool? isSuccessfullyReinitialized = null;

                if (GameManager.CurrentGame == null)
                {
                    isSuccessfullyReinitialized = await ReInitializeGame();
                }

                if (isSuccessfullyReinitialized != false)
                {

                    GameManager.UpdateCurrentPlayerGameConnectionId(GameHubConnection.GetConnectionId());

                    DisconectingTrackingService.InitializeTimers();

                    MakeMovesManager.InitializePlayers();

                    SetUIUpdateTriggers();

                    DisconectingTrackingService.StartWaitingAnotherPlayerTimer();

                    GameSessionService.SetDisconnectingTracking(DisconectingTrackingService);

                    await DisconectingTrackingService.SendConnectedStatus((int)GameManager.CurrentGame.RoomId, GameManager.GetCurrentUserId());

                    await GameHubConnection.AskAnotherPlayerBoard((int)GameManager.CurrentGame.RoomId, GameManager.CurrentPlayer.Id);

                    GameSessionService.IsTwoPlayersPlaying = GameManager.IsTwoPlayersPlaying();

                    GamesStatisticsService.GetGamesByResultAndPlayers(GameManager);
                }
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private void SetUIUpdateTriggers()
    {
        DisconectingTrackingService.StateHasChanged += () => InvokeAsync(StateHasChanged);

        MakeMovesManager.StateHasChanged += () => InvokeAsync(StateHasChanged);

        ChatService.StateHasChanged += () => InvokeAsync(StateHasChanged);

        GameSessionService.StateHasChanged += () => InvokeAsync(StateHasChanged);

        CheckForWinnerManager.StateHasChanged += () => InvokeAsync(StateHasChanged);
    }

    private async Task<bool> ReInitializeGame()
    {
        GameManager.ClearData();

        GameReconnectingService.MakePlayerNotPlaying(GameManager.GetCurrentUserId());

        bool isGameReinitializedSuccesfully = await GameInitializeProcess.InitializeGameForAuthenticatedUser();

        if (!isGameReinitializedSuccesfully)
        {
            NavigationManager.NavigateTo("/");
            return false;
        }
        return true;
    }

    private async Task InitializeGameHubConnection()
    {
        GameHubConnection = new GameHubConnection(NavigationManager);

        // Moves
        GameHubConnection.ReceiveGameStateEvent += MakeMovesManager.ReceiveGameState;
        GameHubConnection.ReceiveGameStatusEvent += CheckForWinnerManager.ReceiveGameStatus;

        // Disconnections
        GameHubConnection.ReceiveOpponentLeftEvent += DisconectingTrackingService.ReceiveOpponentLeft;

        GameHubConnection.ReceiveOpponentLeavesEvent += DisconectingTrackingService.ReceiveOpponentLeaves;

        GameHubConnection.ReceiveIfOpponentLeavesEvent += DisconectingTrackingService.ReceiveCheckIfOpponentLeaves;

        GameHubConnection.ReceiveOpponentNotLeavesEvent += DisconectingTrackingService.ReceiveOpponentNotLeaves;

        GameHubConnection.ReceiveReloadTimersEvent += DisconectingTrackingService.ReloadMoveTimer;
        // Get Board
        GameHubConnection.AskToReceiveAnotherPlayerBoardEvent += MakeMovesManager.AskToReceiveAnotherPlayerBoard;

        GameHubConnection.ReceiveAnotherPlayerBoardEvent += MakeMovesManager.ReceiveAnotherPlayerBoard;

        // Chat
        GameHubConnection.ReceiveChatMessageEvent += ChatService.ReceiveChatMessage;

        // Next Game
        GameHubConnection.ReceiveAnotherPlayerAnswerForNextGameEvent += GameSessionService.ReceiveRequestOnNextGame;

        GameHubConnection.ReceiveDeclineAnotherGameRequestEvent += GameSessionService.ReceiveDeclineRequestOnNextGame;

        GameHubConnection.ReceiveReadyNextGameStatusEvent += GameSessionService.ReceiveReadyNextGameStatus;

        // Connected Status
        GameHubConnection.ReceiveConnectedStatusEvent += DisconectingTrackingService.ReceiveConnectedStatus;

        await EnsureConnectionEstablished();
    }

    private async Task EnsureConnectionEstablished()
    {
        if (GameHubConnection._hubConnection.State != HubConnectionState.Connected)
        {
            try
            {
                await GameHubConnection.StartConnectionAsync();
                if (GameManager.CurrentGame == null)
                {
                    await ReInitializeGame();
                }
                else
                {
                    await GameHubConnection.JoinGame((int)GameManager.CurrentGame.RoomId);
                }
            }
            catch (Exception)
            {
                await InitializeGameHubConnection();

                return;
            }
        }
    }

    private async Task LeaveGame()
    {
        if (!GameManager.IsCleanedUp)
        {
            await GameHubConnection.SendUserLeaves((int)GameManager.CurrentGame.RoomId, GameManager.GetCurrentUserId());

            GameReconnectingService.MakePlayerNotPlaying(GameManager.GetCurrentUserId());

            GameBoardManager.RemoveBoard(GameManager.CurrentGame.UniqueId);

            GameReconnectingService.IsPlayerLeaveGameByButton = true;

            DisconectingTrackingService.UpdateGameResultAfterTwoPlayersDisconnection();

            DisconectingTrackingService.StopTimers();
        }

        GameManager.ClearData();

        NavigationManager.NavigateTo("/");
    }

    private async Task PlayNextGame()
       => await GameSessionService.SendRequestOnNextGame((int)GameManager.CurrentGame.RoomId, GameManager.GetCurrentUserId());


    public async ValueTask DisposeAsync()
    {
        if (GameManager.IsInitialized)
        {
            GameReconnectingService.MakePlayerNotPlaying(GameManager.GetCurrentUserId());

            GameManager.ClearData();

            await DisconectingTrackingService.DisposeAsync();

            await GameHubConnection.DisposeAsync();

            Logger.LogError($"Dispose");
        }
        else
            Logger.LogError($"NotDispose");
    }
}
