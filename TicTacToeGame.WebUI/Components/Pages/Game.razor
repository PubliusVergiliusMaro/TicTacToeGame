@page "/game"
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeGame.Domain.Constants
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using System.Security.Claims
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.GameProcessService
@using TicTacToeGame.Services.GamesStatisticServices
@using TicTacToeGame.Services.HubConnections
@using TicTacToeGame.WebUI.Components.Account
@using TicTacToeGame.WebUI.Hubs

@inject PlayerRepository _playerRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject GameInitializeProcess GameInitializeProcess
@inject CheckForWinnerManager CheckForWinnerManager
@inject MakeMovesGameManager MakeMovesGameManager
@inject PlayerDisconectingTrackingService DisconectingTrackingService
@inject GameChatService ChatService
@inject GameReconnectingService GameReconnectingService
@inject GameRepository GameRepository
@inject GamesStatisticsService GamesStatisticsService
@inject GameSessionService GameSessionService
@using Microsoft.JSInterop
@inject IJSRuntime JS
@* @inject GameHubConnection GameHubConnection *@

@implements IAsyncDisposable
@rendermode InteractiveServer

<h1 style="text-align: center;">Tic Tac Toe Game</h1>
@if (DisconectingTrackingService.OpponentLeaved)
{
    <h3 style="text-align: center;">Opponent @DisconectingTrackingService.LivedPlayerName leaves game</h3>
}

<div class="xED3T" style="display: flex; flex-direction: column; align-items: center; padding: 20px; background-color: #14bdac;">
    <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        You`re @MakeMovesGameManager.CurrentPlayerSign;
    </p>
    <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        @GameStatus
    </p>
    <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        Current turn now: @MakeMovesGameManager.DetermineWhoMakeMoveNow(CurrentGame).ToString();
    </p>
    <table jsname="z2IlVe" class="KD6xlc" style="border-collapse: separate; border-spacing: 10px;">
        <tbody>
            @for (int row = TicTacToeRules.FIRST_ROW_OF_BOARD; row < TicTacToeRules.MAX_COUNT_OF_BOARD_ROWS; row++)
            {
                <div style="display: flex;">
                    @for (int col = TicTacToeRules.FIRST_COLUMN_OF_BOARD; col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS; col++)
                    {
                        int index = row * 3 + col;
                        <button style="width: 100px; height: 100px; font-size: 48px; text-align: center; vertical-align: middle;
                                background-color: #14bdac; border: none; color: #fff;"
                                @onclick="(async () => await MakeMove(index))" disabled="@IsButtonDisabled(index)">
                            @GetSquareValue(index)
                        </button>
                        @if (col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS - 1)
                        {
                            <!-- This div will create a vertical separator between buttons -->
                            <div style="width: 5px; background-color: #70757a; height: 100px; "></div>
                        }
                    }
                </div>
                @if (row < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS - 1)
                {
                    <!-- This div will create a vertical separator between buttons -->
                    <div style="height: 5px; background-color: #70757a; width: 100%; "></div>
                }
            }
        </tbody>
    </table>
    @if (GameSessionService.RequestForNextGame)
    {
        @if (!GameSessionService.ApprovedNextGame && !GameSessionService.DeclinedNextGame)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Game Invitation</h5>
                    <p class="card-text">You have been invited to another game. Do you accept?</p>
                    <button class="btn btn-success" @onclick="Approve">Approve</button>
                    <button class="btn btn-danger" @onclick="Decline">Decline</button>
                </div>
            </div>
        }
    }
    @if (GameSessionService.ApprovedNextGame)
    {
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Game Invitation was accepted</h5>
                <p class="text-success"><i class="fas fa-check"></i> Game approved</p>
            </div>
        </div>
    }
    else if (GameSessionService.DeclinedNextGame)
    {
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Game Invitation was declined</h5>
                <p class="text-danger"><i class="fas fa-times"></i> Game declined</p>
            </div>
        </div>
    }
</div>

<div class="d-flex">
    @if (CurrentGame.GameResult == GameState.Finished)
    {
        <button style="margin-top: 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                @onclick="GoToHomePage">
            Go to Home Page
        </button>
        @* @if (GameSessionService.IsTwoPlayersPlaying && !GameSessionService.RequestForNextGame)
    { *@
        <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                @onclick="PlayNextGame">
            Send ask to another game
        </button>
        @*  } *@
    }
    @if (ChatService.NewMessage == true)
    {
        <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: orangered; color: #fff; border: none; cursor: pointer;"
                @onclick="ChatService.ToggleChat">
            Toggle Chat
        </button>
    }
    else
    {
        <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                @onclick="ChatService.ToggleChat">
            Toggle Chat
        </button>
    }
</div>


@if (gamesHistory.Games.Count == 0)
{

}
else
{
    <div class="scoreboard-container" style="display: flex; flex-direction: column; justify-content: center; align-items: center; margin: 10px 0;">
        <div class="scoreboard" style="text-align: center; background-color: #f0f0f0; padding: 20px; border-radius: 10px;">
            <h4 class="scoreboard-header" style="margin-bottom: 10px;">Games played: @gamesHistory.Games.Count</h4>

            <div class="scoreboard-players" style="display: flex; justify-content: center; align-items: center;">
                <div class="scoreboard-player" style="display: flex; flex-direction: column; margin: 0 10px;">
                    <span class="scoreboard-username" style="font-size: 1.2em;">@currentPlayerHost.UserName</span>
                    <span class="scoreboard-score" style="font-size: 1.5em; font-weight: bold;">@hostWins</span>
                </div>

                <div class="scoreboard-divider" style="font-size: 1.5em; margin: 0 5px;">:</div>

                <div class="scoreboard-player" style="display: flex; flex-direction: column; margin: 0 10px;">
                    <span class="scoreboard-username" style="font-size: 1.2em;">@currentPlayerGuest.UserName</span>
                    <span class="scoreboard-score" style="font-size: 1.5em; font-weight: bold;">@guestWins</span>
                </div>
            </div>

            <h3 class="scoreboard-tie" style="color: orange; margin-top: 10px;">Tie @(gamesHistory.Games.Count - (hostWins + guestWins))</h3>
        </div>
    </div>


    @foreach (var game in gamesHistory.Games)
    {
        string cardColorClass = "";
        Player winner = GamesStatisticsService.GetWinner(game.Winner, currentPlayerHost, currentPlayerGuest);
        bool hostWon = (winner != null && winner.Id == currentPlayerHost.Id);
        bool guestWon = (winner != null && winner.Id == currentPlayerGuest.Id);
        bool isDraw = (winner == null);
        if (user.Claims.First().Value.ToString() == currentPlayerHost.Id)
        {
            cardColorClass = hostWon ? "bg-success" : guestWon ? "bg-danger" : isDraw ? "bg-warning" : "";
        }
        else
        {
            cardColorClass = hostWon ? "bg-danger" : guestWon ? "bg-success" : isDraw ? "bg-warning" : "";

        }
        <div class="card m-1 @cardColorClass">
            <div class="card-body">
                <div class="card m-1">
                    <div class="card-body">
                        <h5 class="card-title">
                            @(isDraw ? "Draw" : $"Winner: {winner.UserName}")
                            @{
                                string.Format("{0} ({1}) : {2} ({3})", currentPlayerHost.UserName, hostWins, currentPlayerGuest.UserName, guestWins);
                            }
                        </h5>
                        <p class="card-text">@game.CreatedAt.ToString("D")</p>
                    </div>
                </div>
            </div>
        </div>
    }
}
@if (ChatService._isChatVisible)
{
    <div id="chatContainer" style="position: fixed; bottom: 0; right: 0; width: 300px; height: 400px; border: 1px solid #ccc; padding: 10px; margin: 10px; background-color: #f9f9f9;">
        <div class="d-flex justify-content-between">
            <h3>Chat</h3>
            <button style="margin:0px 0px 5px 0px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;" @onclick="ChatService.ToggleChat">
                Toggle Chat
            </button>
        </div>
        <div id="chatContent" style="height: 80%; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; word-wrap: break-word;">
            @foreach (var chatmsg in GameChatService.ChatMessages)
            {
                <p><strong>@chatmsg.Key:</strong> @chatmsg.Value</p>
            }
        </div>
        <input @bind="Message" @bind:event="oninput" type="text" style="width: 70%; padding: 5px;" placeholder="Type your message here..." />
        <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(message)" style="width: 28%; padding: 5px 10px; background-color: @(string.IsNullOrEmpty(message) ? "#ccc" : "#14bdac"); color: #fff; border: none; cursor: pointer;">Send</button>
    </div>

    <script>
        // JavaScript to scroll the chat window to the bottom
        var chatContainer = document.getElementById("chatContent");
        chatContainer.scrollTop = chatContainer.scrollHeight;

        // Function to scroll the chat window to the bottom
        function scrollChatToBottom() {
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // Call the function whenever the chat visibility changes
        document.addEventListener("DOMContentLoaded", function () {
            scrollChatToBottom();
        });
    </script>
}

@code {

    // Board
    private BoardElements[] board = new BoardElements[TicTacToeRules.BOARD_SIZE];
    private GamesHistory gamesHistory = new GamesHistory();
    // For checking current move number
    // Display who win
    // Are using in signalR
    private string GameStatus = "";
    private string gameId = "";

    // Current game
    private TicTacToeGame.Domain.Models.Game CurrentGame = new();
    private Player currentPlayerHost;
    private Player currentPlayerGuest;

    // SignalR
    private HubConnection hubConnection;

    // Authentication data
    private AuthenticationState authState;
    private ClaimsPrincipal? user;
    // Chat
    string message = "";
    public string Message
    {   
        get=>message;
        set 
        { 
            message = value;
            StateHasChanged();
        } 
    }
    private bool isInitialized = false;
    int hostWins = 0;
    int guestWins = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized)
        {
            isInitialized = true;
            GameStatus = "Game in progress";
            user = await GameInitializeProcess.HandleGameForAuthenticatedUser(authState);
            CurrentGame = GameInitializeProcess.CurrentGame;
            if (CurrentGame is null)
            {
                return;
            }

            UpdateCurrentPlayers();
            try
            {
                hubConnection = new HubConnectionBuilder()
                        .WithUrl(NavigationManager.ToAbsoluteUri(GameHub.HubUrl))
                        .Build();

                hubConnection.On<BoardElements[], PlayerType, int>("SendGameState", (receivedBoard, nextPlayerTurn, gameId) =>
                {
                    InvokeAsync(() =>
                    {
                        board = receivedBoard;
                        CurrentGame.CurrentTurn = nextPlayerTurn;
                        MakeMovesGameManager.UpdateGameAfterMove(CurrentGame);
                        StateHasChanged();
                    });
                });
                hubConnection.On<GameState, string, int>("SendGameStatus", (receiveGameResult, receiveGameStatus, gameId) =>
                {
                    InvokeAsync(() =>
                    {
                        CurrentGame.GameResult = receiveGameResult;
                        GameStatus = receiveGameStatus;
                        StateHasChanged();
                    });
                });
                ///
                hubConnection.On("OpponentLeft", () =>
                {
                    InvokeAsync(() =>
                    {
                        DisconectingTrackingService.OpponentLeaved = true;
                        GameStatus = "Game Over";
                        StateHasChanged();
                    });
                });
                hubConnection.On<string, int>("AskAnotherPlayerBoard", async (userId, gameId) =>
                {
                    if (DisconectingTrackingService.CurrentPlayer != null)
                    {
                        string currentUserId = DisconectingTrackingService.CurrentPlayer.Id;
                        if (userId != currentUserId)
                            await hubConnection.SendAsync("SendAnotherPlayerBoard", CurrentGame.RoomId, currentUserId, board);
                    }
                });
                hubConnection.On<string, BoardElements[]>("SendAnotherPlayerBoard", (userId, playerBoard) =>
                {
                    InvokeAsync(() =>
                    {
                        if (userId != DisconectingTrackingService.CurrentPlayer.Id)
                        {
                            board = playerBoard;
                            StateHasChanged();
                        }
                    });
                });
                DisconectingTrackingService.SetHubConnection(hubConnection);

                ChatService.SetHubConnection(hubConnection);

                GameSessionService.SetHubConnection(hubConnection);

                await hubConnection.StartAsync();
            }
            catch (Exception ex)
            {
                if (user != null && !GameInitializeProcess.IsPlayerAlreadyPlaying)
                {
                    MakeCurrentPlayerNotPlaying();
                }
                return;
            }

            try
            {
                await hubConnection.SendAsync("JoinGame", CurrentGame.RoomId);
                //await GameHubConnection.JoinGame((int)CurrentGame.RoomId);
            }

            catch (Exception)
            {

                return;
            }

            UpdatePlayersGameData(hubConnection.ConnectionId);//hubConnection.ConnectionId);

            DisconectingTrackingService.InitizalisePlayers(currentPlayerHost, currentPlayerGuest, user);

            DisconectingTrackingService.InitializeGame(CurrentGame);

            DisconectingTrackingService.InitializeTimers();

            DisconectingTrackingService.UpdateComponent += () => InvokeAsync(StateHasChanged);

            MakeMovesGameManager.InitializePlayers(currentPlayerHost, currentPlayerGuest, DisconectingTrackingService.CurrentPlayer, hubConnection);

            ChatService.SetSender(CurrentGame, DisconectingTrackingService.CurrentPlayer);

            GameSessionService.SetCurrentPlayerAndGame(DisconectingTrackingService.CurrentPlayer, CurrentGame);

            ChatService.UpdateComponent += () => InvokeAsync(StateHasChanged);

            GameSessionService.UpdateComponent += () => InvokeAsync(StateHasChanged);

            //await GameHubConnection.AskAnotherPlayerBoard((int)CurrentGame.RoomId, DisconectingTrackingService.CurrentPlayer.Id);
            await hubConnection.SendAsync("AskAnotherPlayerBoard", CurrentGame.RoomId, DisconectingTrackingService.CurrentPlayer.Id);

            GameSessionService.IsTwoPlayersPlaying = await DisconectingTrackingService.CheckIfTwoPlayersArePlaying();
            gamesHistory.Games = GetGamesByResultAndPlayers();

            StateHasChanged();
        }
    }
    private void SendAnotherPlayerBoard(string userId, BoardElements[] playerBoard)
    {
        InvokeAsync(() =>
        {
            if (userId != DisconectingTrackingService.CurrentPlayer.Id)
            {
                board = playerBoard;
                StateHasChanged();
            }
        });
    }
    private void AskAnotherPlayerBoard(string userId, int gameId)
    {
        // Convert the async method to a synchronous method
        AskAnotherPlayerBoardAsync(userId, gameId).GetAwaiter().GetResult();
    }
    private async Task AskAnotherPlayerBoardAsync(string userId, int gameId)
    {
        if (DisconectingTrackingService.CurrentPlayer != null)
        {
            string currentUserId = DisconectingTrackingService.CurrentPlayer.Id;
            if (userId != currentUserId)
                await hubConnection.SendAsync("SendAnotherPlayerBoard", CurrentGame.RoomId, currentUserId, board);
            // await GameHubConnection.SendAnotherPlayerBoard((int)CurrentGame.RoomId, currentUserId, board);
        }
    }
    private void OpponentLeft()
    {
        InvokeAsync(() =>
        {
            DisconectingTrackingService.OpponentLeaved = true;
            GameStatus = "Game Over";
            StateHasChanged();
        });
    }
    private void SendGameStatus(GameState receiveGameResult, string receiveGameStatus, int gameId)
    {
        InvokeAsync(() =>
        {
            CurrentGame.GameResult = receiveGameResult;
            GameStatus = receiveGameStatus;
            StateHasChanged();
        });
    }
    private void SendGameState(BoardElements[] receivedBoard, PlayerType nextPlayerTurn, int gameId)
    {
        InvokeAsync(() =>
        {
            board = receivedBoard;
            CurrentGame.CurrentTurn = nextPlayerTurn;
            MakeMovesGameManager.UpdateGameAfterMove(CurrentGame);
            StateHasChanged();
        });
    }
    private async Task Approve()
    {
        await GameSessionService.ApproveNextGamePlayerRequest();
    }

    private async Task Decline()
    {
        await GameSessionService.DeclineNextPlayerRequest();
    }
    private async Task PlayNextGame()
    {
        await GameSessionService.PlayNextGame();
    }

    public List<TicTacToeGame.Domain.Models.Game> GetGamesByResultAndPlayers()
    {
        var gamesList = GameRepository.GetGameHistoryInSession(GameState.Finished, currentPlayerHost.Id, currentPlayerGuest.Id, CurrentGame.RoomId);
        hostWins = gamesList.Count(game => game.Winner == PlayerType.Host);
        guestWins = gamesList.Count(game => game.Winner == PlayerType.Guest);
        return gamesList;

    }

    private void UpdatePlayersGameData(string connectionId)
    {
        _playerRepository.UpdatePlayerGameContextId(connectionId, currentPlayerHost, currentPlayerGuest, user);

        UpdateCurrentPlayers();
    }

    private async Task MakeMove(int index)
    {
        DisconectingTrackingService.ReloadMoveTimer();
        await MakeMovesGameManager.MakeMove(index, board, CurrentGame, authState, user);
    }


    private string GetSquareValue(int index)
    {
        return (board[index] == BoardElements.Empty) ? "" : board[index].ToString();
    }

    private bool IsButtonDisabled(int index)
    {
        return CurrentGame.GameResult == GameState.Finished;
    }

    private void GoToHomePage()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task SendMessage()
    {
        await ChatService.SendMessage(message);
        message = "";
    }
    void UpdateMessage(ChangeEventArgs e)
    {
        InvokeAsync(() =>
        {
            message = e.Value.ToString();
            StateHasChanged();
        });
    }

    void UpdateSendButton(ChangeEventArgs e) => message = e.Value.ToString();

    public async ValueTask DisposeAsync()
    {
        if (user != null && !GameInitializeProcess.IsPlayerAlreadyPlaying)
        {
            MakeCurrentPlayerNotPlaying();
        }
        if (CurrentGame != null)
        {
            UpdateCurrentPlayers();
        }
        CheckAndUpdateGameResult();

        DisposeTimersAndHubConnection();

    }
    private void MakeCurrentPlayerNotPlaying()
    {
        string userId = user.Claims.First().Value.ToString();
        GameReconnectingService.MakePlayerNotPlaying(userId);
    }
    private void UpdateCurrentPlayers()
    {
        currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
        currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);
    }

    private void CheckAndUpdateGameResult()
    {
        if (currentPlayerGuest is not null && currentPlayerHost is not null)
        {
            if (!currentPlayerGuest.IsPlaying && !currentPlayerHost.IsPlaying)
            {
                CurrentGame = GameRepository.GetById(CurrentGame.Id);
                CurrentGame.GameResult = GameState.Finished;
                if (!CheckForWinnerManager.CheckForWinner(board))
                {
                    if (CheckForWinnerManager.CheckForTie(board))
                    {
                        CurrentGame.Winner = PlayerType.None;
                    }
                }
                else
                {
                    CurrentGame.Winner = (CurrentGame.CurrentTurn == PlayerType.Host) ? PlayerType.Guest : PlayerType.Host;
                }
                GameRepository.UpdateEntity(CurrentGame);
            }
        }
    }

    private async void DisposeTimersAndHubConnection()
    {
        DisconectingTrackingService._moveTimer?.Dispose();
        DisconectingTrackingService._responseTimer?.Dispose();
        //await GameHubConnection.DisposeAsync();

        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }

}
