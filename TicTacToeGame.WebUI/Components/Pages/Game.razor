@page "/game"

@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeGame.Domain.Constants
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using System.Security.Claims
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.GameProcessService
@using TicTacToeGame.Services.GamesStatisticServices
@using TicTacToeGame.WebUI.Components.Account

@inject NavigationManager _navigationManager
@inject PlayerRepository _playerRepository
@inject GameRepository _gameRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject GamesHistoryRepository _gamesHistoryRepository
@inject IGamesStatisticsService _gamesStatisticsService
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject GameInitializeProcess GameInitializeProcess
@inject CheckForWinnerManager CheckForWinnerManager
@inject MakeMovesGameManager MakeMovesGameManager

@implements IDisposable
@rendermode InteractiveServer

<h1 style="text-align: center;">Tic Tac Toe Game</h1>
@if (opponentLeaves)
{
    <h3 style="text-align: center;">Player @livedPlayerName leaves game</h3>

}
<p style="margin-top: 20px; font-size: 18px; color: #333; background-color: #f8f9fa; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
    @GameStatus
</p>
<div style="display: flex; flex-direction: column; align-items: center;">
    @for (int row = TicTacToeRules.FIRST_ROW_OF_BOARD; row < TicTacToeRules.MAX_COUNT_OF_BOARD_ROWS; row++)
    {
        <div>
            @for (int col = TicTacToeRules.FIRST_COLUMN_OF_BOARD; col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS; col++)
            {
                int index = row * 3 + col;
                <button style="width: 100px; height: 100px; font-size: 24px; text-align: center; vertical-align: middle; margin-bottom: 5px;"
                        @onclick="(async () => await MakeMove(index))" disabled="@IsButtonDisabled(index)">
                    @GetSquareValue(index)
                </button>
            }
        </div>
    }
</div>

@if (CurrentGame.GameResult == GameState.Finished)
{
    <button style="margin-top: 10px; padding: 10px 15px; font-size: 16px; background-color: #4CAF50; color: #fff; border: none; cursor: pointer;"
            @onclick="GoToHomePage">
        Go to Home Page
    </button>
}

@code {
    // Board
    private BoardElements[] board = new BoardElements[TicTacToeRules.BOARD_SIZE];

    // For checking current move number

    // Display who win
    // Are using in signalR
    private string GameStatus = "";
    private string gameId = "";
    // Current game
    private TicTacToeGame.Domain.Models.Game CurrentGame = new();
    Player currentPlayerHost;
    Player currentPlayerGuest;

    // SignalR
    private HubConnection hubConnection;


    private bool opponentLeaves = false;

    private string livedPlayerName = "";

    private AuthenticationState authState;
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        GameStatus = "Game in progress";
        user = await GameInitializeProcess.HandleGameForAuthenticatedUser(authState);
        CurrentGame = GameInitializeProcess.CurrentGame;

        currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
        currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        hubConnection.On<BoardElements[], PlayerType, Guid>("SendGameState", (receivedBoard, nextPlayerTurn, gameId) =>
        {
            InvokeAsync(() =>
            {
                board = receivedBoard;
                CurrentGame.CurrentTurn = nextPlayerTurn;
                StateHasChanged();
            });
        });
        hubConnection.On<GameState, string, Guid>("SendGameStatus", (receiveGameResult, receiveGameStatus, gameId) =>
        {
            InvokeAsync(() =>
            {
                CurrentGame.GameResult = receiveGameResult;
                GameStatus = receiveGameStatus;
                StateHasChanged();
            });
        });

        hubConnection.On<Guid>("SendGroupMessage", (gameId) =>
        {
            InvokeAsync(() =>
            {
                this.gameId = gameId.ToString();
                StateHasChanged();
            });
        });

        hubConnection.On<string>("UserDisconnected", (connectionId) =>
        {
            InvokeAsync(() =>
            {

                if (currentPlayerHost.GameConnectionId == connectionId
                || currentPlayerGuest.GameConnectionId == connectionId)
                {
                    if (currentPlayerHost.GameConnectionId == connectionId)
                    {
                        livedPlayerName = currentPlayerHost.UserName;
                    }
                    else
                    {
                        livedPlayerName = currentPlayerGuest.UserName;
                    }
                    // - Firstly we should know if it this connectionId contains one of our players, host or guest
                    // - Then we should display message that opponent leaved the game only for the player that was opponent for
                    //   the player that leaved the game

                    opponentLeaves = true;
                    StateHasChanged();
                    // TODO:
                    // - Add manipulation with game and players in DB
                    if (CurrentGame.GameResult == GameState.InProgress)
                    {
                        CurrentGame.GameResult = GameState.Declined;
                        CurrentGame.Winner = PlayerType.None;

                        _gameRepository.UpdateEntity(CurrentGame);
                    }
                }
            });
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGame", CurrentGame.UniqueId);

        UpdatePlayersGameData(hubConnection.ConnectionId);
        MakeMovesGameManager.InitializePlayers(currentPlayerHost, currentPlayerGuest, hubConnection);
    }
    private void UpdatePlayersGameData(string connectionId)
    {
        // maybe add valdiation if users is null

        // maybe make some method for updating another player because on one client updates only one player
        _playerRepository.UpdatePlayerGameContextId(connectionId, currentPlayerHost, currentPlayerGuest, user);

        currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
        currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);
    }
    
    private async Task MakeMove(int index)
    {
        await MakeMovesGameManager.MakeMove(index, board, CurrentGame, authState, user);
       
    }
    

    private string GetSquareValue(int index)
    {
        return (board[index] == BoardElements.Empty) ? "" : board[index].ToString();
    }

    private bool IsButtonDisabled(int index)
    {
        return CurrentGame.GameResult == GameState.Finished;
    }

    private void GoToHomePage()
    {
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        hubConnection?.DisposeAsync();
    }
}