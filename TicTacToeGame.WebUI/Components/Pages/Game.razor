@page "/game"

@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using System.Security.Claims
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.GamesStatisticServices
@inject NavigationManager _navigationManager
@inject PlayerRepository _playerRepository
@inject GameRepository _gameRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject GamesHistoryRepository _gamesHistoryRepository
@inject IGamesStatisticsService _gamesStatisticsService
@implements IDisposable
@rendermode InteractiveServer
                             
<h1 style="text-align: center;">Tic Tac Toe Game</h1>

<div style="display: flex; flex-direction: column; align-items: center;">
    @for (int row = 0; row < 3; row++)
    {
        <div>
            @for (int col = 0; col < 3; col++)
            {
                int index = row * 3 + col;
                <button style="width: 100px; height: 100px; font-size: 24px; text-align: center; vertical-align: middle; margin-bottom: 5px;"
                        @onclick="(async () => await MakeMove(index))" disabled="@IsButtonDisabled(index)">
                    @GetSquareValue(index)
                </button>
            }
        </div>
    }
</div>

<p>@GameStatus</p>

@code {

    private BoardElements[] board = new BoardElements[9];
    private string GameStatus = "";
    private int counter;
    private TicTacToeGame.Domain.Models.Game CurrentGame = new();
    private HubConnection hubConnection;
    private PlayerType CurrentTurnMove;
    Player currentPlayerHost;
    Player currentPlayerGuest;
    protected override async Task OnInitializedAsync()
    {
        Random random = new Random();

        GameStatus = "Game in progress";

        AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? user = authState.User;
        CurrentGame = _gameRepository.GetByUsersId(user.Claims.First().Value.ToString());

        currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
        currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);
        CurrentTurnMove = PlayerType.Host;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        hubConnection.On<BoardElements[], PlayerType>("SendGameState", (receivedBoard, nextPlayerTurn) =>
        {
            InvokeAsync(() =>
            {
                board = receivedBoard;
                CurrentTurnMove = nextPlayerTurn;
                StateHasChanged();
            });
        });

        await hubConnection.StartAsync();
    }

    private async Task MakeMove(int index)
    {   
        if (board[index] == BoardElements.Empty && CurrentGame.GameResult == GameState.Starting)
        {
            // Check if it's the correct player's turn
            if (await IsCurrentPlayersTurn())
            {
                // Put X or O on cell
                board[index] = (CurrentTurnMove == PlayerType.Host) ? BoardElements.X : BoardElements.O;
                counter++;

                // Only after five movements can a player win
                if (counter >= 3)
                {             
                    if (CheckForWinner())
                    {
                        GamesHistory hostGamesHistory = await _gamesStatisticsService.GetGamesHistoryByPlayerId(currentPlayerHost.Id);
                        GamesHistory guestGamesHistory = await _gamesStatisticsService.GetGamesHistoryByPlayerId(currentPlayerGuest.Id);

                        CurrentGame.GamesHistoryHostId = hostGamesHistory.Id;
                        CurrentGame.GamesHistoryGuestId = guestGamesHistory.Id;

                        CurrentGame.GameResult = GameState.Finished;
                        _gameRepository.UpdateEntity(CurrentGame);
                    }
                }

                // Switch player turns
                await SentGameState();
            }
        }
    }

    private async Task SentGameState()
    {
        PlayerType nextPlayerTurn = (CurrentTurnMove == PlayerType.Host) ? PlayerType.Guest : PlayerType.Host;
        //CurrentGame.CurrentTurn = nextPlayerTurn;
        //_gameRepository.UpdateEntity(CurrentGame);
        await hubConnection.SendAsync("SendGameState", board, nextPlayerTurn);
    }


    // Other methods...

    private async Task<bool> IsCurrentPlayersTurn()
    {
        AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? user = authState.User;

        return (CurrentTurnMove == PlayerType.Host && user.Claims.First().Subject.Name == currentPlayerHost.Email) ||
        (CurrentTurnMove == PlayerType.Guest && user.Claims.First().Subject.Name == currentPlayerGuest.Email);

    }


    private bool CheckForWinner()
    {

        for (int row = 0; row < 3; row++)
        {   //Check row
            if (AreAllEqual(board[row * 3], board[row * 3 + 1], board[row * 3 + 2]))
            {
                GameStatus = $"{board[row * 3]} wins!";
                return true;
            }
            // Check columns
            if (AreAllEqual(board[row], board[row + 3], board[row + 6]))
            {
                GameStatus = $"{board[row]} wins!";
                return true;
            }
        }
        // Check diagonals
        if (AreAllEqual(board[0], board[4], board[8]))
        {
            GameStatus = $"{board[0]} wins!";
            return true;
        }

        if (AreAllEqual(board[2], board[4], board[6]))
        {
            GameStatus = $"{board[2]} wins!";
            return true;
        }

        // Check for a tie
        if (board.All(cell => cell != BoardElements.Empty))
        {
            GameStatus = "It's a tie!";
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool AreAllEqual(BoardElements a, BoardElements b, BoardElements c)
    {
        return a != BoardElements.Empty && a == b && b == c;
    }


    private string GetSquareValue(int index)
    {
        return (board[index] == BoardElements.Empty) ? "" : board[index].ToString();
    }

    private bool IsButtonDisabled(int index) => CurrentGame.GameResult == GameState.Finished;

    public void Dispose()
    {
        hubConnection?.DisposeAsync();
    }
}