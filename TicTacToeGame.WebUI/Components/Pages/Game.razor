@page "/game"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeGame.Domain.Constants
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using System.Security.Claims
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.GameProcessService
@using TicTacToeGame.Services.GamesStatisticServices
@using TicTacToeGame.Services.HubConnections
@using TicTacToeGame.WebUI.Components.Account
@using TicTacToeGame.WebUI.Components.Layout
@using TicTacToeGame.WebUI.Hubs

@inject PlayerRepository _playerRepository
@inject GameRepository GameRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavigationManager
@inject GameInitializeService GameInitializeProcess
@inject CheckForWinnerManager CheckForWinnerManager
@inject MakeMovesGameManager MakeMovesManager
@inject PlayerDisconectingTrackingService DisconectingTrackingService
@inject GameChatService ChatService
@inject GameReconnectingService GameReconnectingService
@inject GamesStatisticsService GamesStatisticsService
@inject GameSessionService GameSessionService
@inject GameHubConnection GameHubConnection
@inject GameManager GameManager

@implements IAsyncDisposable

@rendermode InteractiveServer

@attribute [Authorize]

@if (GameManager.IsInitialized)
{
    <h1 style="text-align: center;">Tic Tac Toe Game</h1>
    @if (DisconectingTrackingService.OpponentLeaved)
    {
        <h3 style="text-align: center;">Opponent @DisconectingTrackingService.LivedPlayerName leaves game</h3>
    }

    <div class="xED3T" style="display: flex; flex-direction: column; align-items: center; padding: 20px; background-color: #14bdac;">
        <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            You`re @MakeMovesManager.CurrentPlayerSign;
        </p>
        <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            @CheckForWinnerManager.GameStatus
        </p>
        <p style="margin-top: 20px; font-size: 18px; color: #fff; background-color: #14bdac; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            Current turn now: @MakeMovesManager.DetermineWhoMakeMoveNow().ToString();
        </p>

        <table jsname="z2IlVe" class="KD6xlc" style="border-collapse: separate; border-spacing: 10px;">
            <tbody>
                @for (int row = TicTacToeRules.FIRST_ROW_OF_BOARD; row < TicTacToeRules.MAX_COUNT_OF_BOARD_ROWS; row++)
                {
                    <div style="display: flex;">
                        @for (int col = TicTacToeRules.FIRST_COLUMN_OF_BOARD; col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS; col++)
                        {
                            int index = row * 3 + col;
                            <button style="width: 100px; height: 100px; font-size: 48px; text-align: center; vertical-align: middle;
                                background-color: #14bdac; border: none; color: #fff;"
                                    @onclick="(async () => await MakeMove(index))" disabled="@IsButtonDisabled(index)">
                                @GetSquareValue(index)
                            </button>
                            @if (col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS - 1)
                            {
                                <div style="width: 5px; background-color: #70757a; height: 100px; "></div>
                            }
                        }
                    </div>
                    @if (row < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS - 1)
                    {
                        <div style="height: 5px; background-color: #70757a; width: 100%; "></div>
                    }
                }
            </tbody>
        </table>
        @if (GameSessionService.RequestForNextGame)
        {
            @if (!GameSessionService.ApprovedNextGame && !GameSessionService.DeclinedNextGame)
            {
                <div class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">Game Invitation</h5>
                        <p class="card-text">You have been invited to another game. Do you accept?</p>
                        <button class="btn btn-success" @onclick="Approve">Approve</button>
                        <button class="btn btn-danger" @onclick="Decline">Decline</button>
                    </div>
                </div>
            }
        }
        @if (GameSessionService.ApprovedNextGame)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Game Invitation was accepted</h5>
                    <p class="text-success"><i class="fas fa-check"></i> Game approved</p>
                </div>
            </div>
        }
        else if (GameSessionService.DeclinedNextGame)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Game Invitation was declined</h5>
                    <p class="text-danger"><i class="fas fa-times"></i> Game declined</p>
                </div>
            </div>
        }
    </div>

    <div class="d-flex">
        @if (GameManager.CurrentGame.GameResult == GameState.Finished)
        {
            @if (!GameSessionService.RequestForNextGame)
            {
                <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                        @onclick="PlayNextGame">
                    Send ask to another game
                </button>
            }
        }
        @if (ChatService.IsReceivedNewMessage == true)
        {
            <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: orangered; color: #fff; border: none; cursor: pointer;"
                    @onclick="ChatService.ToggleChat">
                Chat
            </button>
        }
        else
        {
            <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;"
                    @onclick="ChatService.ToggleChat">
                Chat
            </button>
        }
        <button style="margin: 10px 0px 0px 10px; padding: 10px 15px; font-size: 16px; background-color: #ff6347; color: #fff; border: none; cursor: pointer;" @onclick="LeaveGame">
            Leave Game
        </button>
    </div>
    @if (GamesStatisticsService.GamesHistory.Games.Count != 0)
    {
        <div class="scoreboard-container" style="display: flex; flex-direction: column; justify-content: center; align-items: center; margin: 10px 0;">
            <div class="scoreboard" style="text-align: center; background-color: #f0f0f0; padding: 20px; border-radius: 10px;">
                <h4 class="scoreboard-header" style="margin-bottom: 10px;">Games played: @GamesStatisticsService.GamesHistory.Games.Count</h4>

                <div class="scoreboard-players" style="display: flex; justify-content: center; align-items: center;">
                    <div class="scoreboard-player" style="display: flex; flex-direction: column; margin: 0 10px;">
                        <span class="scoreboard-username" style="font-size: 1.2em;">@GameManager.CurrentPlayerHost.UserName</span>
                        <span class="scoreboard-score" style="font-size: 1.5em; font-weight: bold;">@GamesStatisticsService.HostWinsCount</span>
                    </div>

                    <div class="scoreboard-divider" style="font-size: 1.5em; margin: 0 5px;">:</div>

                    <div class="scoreboard-player" style="display: flex; flex-direction: column; margin: 0 10px;">
                        <span class="scoreboard-username" style="font-size: 1.2em;">@GameManager.CurrentPlayerGuest.UserName</span>
                        <span class="scoreboard-score" style="font-size: 1.5em; font-weight: bold;">@GamesStatisticsService.GuestWinsCount</span>
                    </div>
                </div>

                <h3 class="scoreboard-tie" style="color: orange; margin-top: 10px;">
                    Tie @(GamesStatisticsService.GamesHistory.Games.Count - (GamesStatisticsService.HostWinsCount + GamesStatisticsService.GuestWinsCount))
                    </h3>
            </div>
        </div>


        @foreach (var game in GamesStatisticsService.GamesHistory.Games)
        {
            string cardColorClass = "";
            Player winner = GamesStatisticsService.GetWinner(game.Winner, GameManager.CurrentPlayerHost, GameManager.CurrentPlayerGuest);
            bool hostWon = (winner != null && winner.Id == GameManager.CurrentPlayerHost.Id);
            bool guestWon = (winner != null && winner.Id == GameManager.CurrentPlayerGuest.Id);
            bool isDraw = (winner == null);
            if (GameManager.GetCurrentUserId() == GameManager.CurrentPlayerHost.Id)
            {
                cardColorClass = hostWon ? "bg-success" : guestWon ? "bg-danger" : isDraw ? "bg-warning" : "";
            }
            else
            {
                cardColorClass = hostWon ? "bg-danger" : guestWon ? "bg-success" : isDraw ? "bg-warning" : "";

            }
            <div class="card m-1 @cardColorClass">
                <div class="card-body">
                    <div class="card m-1">
                        <div class="card-body">
                            <h5 class="card-title">
                                @(isDraw ? "Draw" : $"Winner: {winner.UserName}")
                                @{
                                    string.Format("{0} ({1}) : {2} ({3})", GameManager.CurrentPlayerHost.UserName, GamesStatisticsService.HostWinsCount, GameManager.CurrentPlayerGuest.UserName, GamesStatisticsService.GuestWinsCount);
                                }
                            </h5>
                            <p class="card-text">@game.CreatedAt.ToString("D")</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    @if (ChatService.IsChatVisible)
    {
        <div id="chatContainer" style="position: fixed; bottom: 0; right: 0; width: 300px; height: 400px; border: 1px solid #ccc; padding: 10px; margin: 10px; background-color: #f9f9f9;">
            <div class="d-flex justify-content-between">
                <h3>Chat</h3>
                <button style="margin:0px 0px 5px 0px; font-size: 16px; background-color: #14bdac; color: #fff; border: none; cursor: pointer;" @onclick="ChatService.ToggleChat">
                    Toggle Chat
                </button>
            </div>
            <div id="chatContent" style="height: 80%; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; word-wrap: break-word;">
                @foreach (var chatmsg in GameChatService.ChatMessages.Where(msg => (msg.PlayerId == GameManager.CurrentPlayerGuest.Id || msg.PlayerId == GameManager.CurrentPlayerHost.Id) && msg.RoomId == (int)GameManager.CurrentGame.RoomId))
                {
                    <p><strong>@chatmsg.PlayerNickname:</strong> @chatmsg.Message</p>
                }

            </div>
            <input @bind="ChatService.Message" @bind:event="oninput" type="text" style="width: 70%; padding: 5px;" placeholder="Type your message here..." maxlength="250" />
            <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(ChatService.Message)" style="width: 28%; padding: 5px 10px; background-color: @(string.IsNullOrEmpty(ChatService.Message) ? "#ccc" : "#14bdac"); color: #fff; border: none; cursor: pointer;">Send</button>
        </div>

        <script>
            // JavaScript to scroll the chat window to the bottom
            var chatContainer = document.getElementById("chatContent");
            chatContainer.scrollTop = chatContainer.scrollHeight;

            // Function to scroll the chat window to the bottom
            function scrollChatToBottom() {
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }

            // Call the function whenever the chat visibility changes
            document.addEventListener("DOMContentLoaded", function () {
                scrollChatToBottom();
            });
        </script>
    }
}
else
{
    <div style="display: flex;justify-content: center;align-items: center;height: 100vh;">
        <div class="loader"></div>
    </div>
}


@code {

    //private GamesHistory gamesHistory = new GamesHistory();

    private bool isInitialized = false;

    // int hostWins = 0;
    // int guestWins = 0;

    private bool isGameInitializedSuccesfully = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized)
        {
            isInitialized = true;

            CheckForWinnerManager.GameStatus = "Game in progress";

            isGameInitializedSuccesfully = await GameInitializeProcess.InitializeGameForAuthenticatedUser();

            if (!isGameInitializedSuccesfully)
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            else
            {
                GameHubConnection = new GameHubConnection(NavigationManager);

                await InitializeGameHubConnection();

                DisconectingTrackingService.SetHubConnection(GameHubConnection);

                ChatService.SetHubConnection(GameHubConnection);

                MakeMovesManager.SetHubConnection(GameHubConnection);

                GameSessionService.SetHubConnection(GameHubConnection);

                bool? isSuccessfullyReinitialized = null;
                if (GameManager.CurrentGame == null)
                {
                    isSuccessfullyReinitialized = await ReInitializeGame();
                }

                if (isSuccessfullyReinitialized == null || isSuccessfullyReinitialized == true)
                {

                    GameManager.UpdateCurrentPlayerGameConnectionId(GameHubConnection.GetConnectionId());

                    DisconectingTrackingService.InitializeTimers();

                    MakeMovesManager.InitializePlayers();

                    DisconectingTrackingService.StateHasChanged += () => InvokeAsync(StateHasChanged);

                    MakeMovesManager.StateHasChanged += () => InvokeAsync(StateHasChanged);

                    ChatService.StateHasChanged += () => InvokeAsync(StateHasChanged);

                    GameSessionService.StateHasChanged += () => InvokeAsync(StateHasChanged);

                    CheckForWinnerManager.StateHasChanged += () => InvokeAsync(StateHasChanged);

                    await GameHubConnection.AskAnotherPlayerBoard((int)GameManager.CurrentGame.RoomId, GameManager.CurrentPlayer.Id);

                    GameSessionService.IsTwoPlayersPlaying = GameManager.IsTwoPlayersPlaying();

                    GamesStatisticsService.UpdatePlayersGameHistory(GameManager.CurrentPlayerHost.Id, GameManager.CurrentPlayerGuest.Id, GameManager.CurrentGame.RoomId);

                    // GamesStatisticsService.GamesHistory.Games = GamesStatisticsService.GetGamesHistoryResults(
                    //     GameManager.CurrentPlayerHost.Id, GameManager.CurrentPlayerGuest.Id, GameManager.CurrentGame.RoomId);
                }
                InvokeAsync(StateHasChanged);
            }
        }
    }
    private async Task<bool> ReInitializeGame()
    {
        GameManager.ClearData();

        GameReconnectingService.MakePlayerNotPlaying(GameManager.GetCurrentUserId());

        bool isGameReinitializedSuccesfully = await GameInitializeProcess.InitializeGameForAuthenticatedUser();

        if (!isGameReinitializedSuccesfully)
        {
            NavigationManager.NavigateTo("/");
            return false;
        }
        return true;
    }

    private async Task InitializeGameHubConnection()
    {
        GameHubConnection = new GameHubConnection(NavigationManager);

        GameHubConnection.ReceiveGameStateEvent += MakeMovesManager.SendGameState;

        GameHubConnection.ReceiveGameStatusEvent += CheckForWinnerManager.SendGameStatus;

        GameHubConnection.ReceiveOpponentLeftEvent += DisconectingTrackingService.OpponentLeft;

        GameHubConnection.AskToReceiveAnotherPlayerBoardEvent += MakeMovesManager.AskAnotherPlayerBoard;

        GameHubConnection.ReceiveAnotherPlayerBoardEvent += MakeMovesManager.SendAnotherPlayerBoard;

        GameHubConnection.ReceiveOpponentLeavesEvent += DisconectingTrackingService.OpponentLeaves;

        GameHubConnection.ReceiveIfOpponentLeavesEvent += DisconectingTrackingService.CheckIfOpponentLeaves;

        GameHubConnection.ReceiveOpponentNotLeavesEvent += DisconectingTrackingService.OpponentNotLeaves;

        GameHubConnection.ReceiveChatMessageEvent += ChatService.AddMessage;

        GameHubConnection.ReceiveAnotherPlayerAnswerForNextGameEvent += GameSessionService.AskAnotherPlayerForNextGame;

        GameHubConnection.ReceiveDeclineAnotherGameRequestEvent += GameSessionService.DeclineAnotherGameRequest;

        GameHubConnection.ReceiveAcceptAnotherGameRequestEvent += GameSessionService.AcceptAnotherGameRequest;

        GameHubConnection.ReceiveJoinningToNextGameEvent += GameSessionService.JoinNextGame;

        await EnsureConnectionEstablished();
    }

    private async Task EnsureConnectionEstablished()
    {
        if (GameHubConnection._hubConnection.State != HubConnectionState.Connected)
        {
            try
            {
                await GameHubConnection.StartConnectionAsync();
                if (GameManager.CurrentGame == null)
                {
                    await ReInitializeGame();
                }
                await GameHubConnection.JoinGame((int)GameManager.CurrentGame.RoomId);
            }
            catch (Exception)
            {
                await InitializeGameHubConnection();
                return;
            }
        }
    }
    private void LeaveGame()
    {
        GameReconnectingService.MakePlayerNotPlaying(GameManager.GetCurrentUserId());
        GameReconnectingService.IsPlayerLeaveGameByButton = true;
        DisconectingTrackingService.UpdateGameResultAfterTwoPlayersDisconnection();
        NavigationManager.NavigateTo("/");
    }
    private async Task Approve() => await GameSessionService.ApproveNextGamePlayerRequest();

    private async Task Decline() => await GameSessionService.DeclineNextPlayerRequest();

    private async Task PlayNextGame() => await GameSessionService.PlayNextGame();

    private async Task MakeMove(int index)
    {
        if (MakeMovesManager.MoveWasMade)
        {
            return;
        }

        DisconectingTrackingService.ReloadMoveTimer();

        await MakeMovesManager.MakeMove(index);

        MakeMovesManager.MoveWasMade = true;
    }

    private string GetSquareValue(int index) => (GameManager.Board[index] == BoardElements.Empty) ? "" : GameManager.Board[index].ToString();

    private bool IsButtonDisabled(int index) => GameManager.CurrentGame.GameResult == GameState.Finished;

    private async Task SendMessage()
    {
        await ChatService.SendMessage(ChatService.Message, GameManager.CurrentPlayer, (int)GameManager.CurrentGame.RoomId);
        ChatService.Message = "";
    }
    void UpdateSendButton(ChangeEventArgs e) => ChatService.Message = e.Value.ToString();

    public async ValueTask DisposeAsync()
    {
        await InvokeAsync(async () =>
        {
            if (isGameInitializedSuccesfully)
            {
                GameReconnectingService.MakePlayerNotPlaying(GameManager.GetCurrentUserId());

                GameManager.ClearData();

                await DisconectingTrackingService.DisposeAsync();

                await GameHubConnection.DisposeAsync();
            }
        });
    }
}
