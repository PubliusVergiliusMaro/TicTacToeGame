@page "/game"

@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeGame.Domain.Constants
@using TicTacToeGame.Domain.Enums
@using TicTacToeGame.Domain.Models
@using System.Security.Claims
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.Services.GameProcessService
@using TicTacToeGame.Services.GamesStatisticServices
@using TicTacToeGame.WebUI.Components.Account
@using Timer = System.Timers.Timer;

@inject NavigationManager _navigationManager
@inject PlayerRepository _playerRepository
@inject GameRepository _gameRepository
@inject AuthenticationStateProvider _authenticationStateProvider
@inject GamesHistoryRepository _gamesHistoryRepository
@inject IGamesStatisticsService _gamesStatisticsService
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject GameInitializeProcess GameInitializeProcess
@inject CheckForWinnerManager CheckForWinnerManager
@inject MakeMovesGameManager MakeMovesGameManager
@inject PlayerDisconectingTrackingService DisconectingTrackingService

@implements IDisposable
@rendermode InteractiveServer

<h1 style="text-align: center;">Tic Tac Toe Game</h1>
@if (DisconectingTrackingService.OpponentLeaved)
{
    <h3 style="text-align: center;">Player @DisconectingTrackingService.LivedPlayerName leaves game</h3>

}
<p style="margin-top: 20px; font-size: 18px; color: #333; background-color: #f8f9fa; padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
    @GameStatus
</p>
<div style="display: flex; flex-direction: column; align-items: center;">
    @for (int row = TicTacToeRules.FIRST_ROW_OF_BOARD; row < TicTacToeRules.MAX_COUNT_OF_BOARD_ROWS; row++)
    {
        <div>
            @for (int col = TicTacToeRules.FIRST_COLUMN_OF_BOARD; col < TicTacToeRules.MAX_COUNT_OF_BOARD_COLUMNS; col++)
            {
                int index = row * 3 + col;
                <button style="width: 100px; height: 100px; font-size: 24px; text-align: center; vertical-align: middle; margin-bottom: 5px;"
                        @onclick="(async () => await MakeMove(index))" disabled="@IsButtonDisabled(index)">
                    @GetSquareValue(index)
                </button>
            }
        </div>
    }
</div>
<div>
    <p>@send</p>
</div>

@if (CurrentGame.GameResult == GameState.Finished)
{
    <button style="margin-top: 10px; padding: 10px 15px; font-size: 16px; background-color: #4CAF50; color: #fff; border: none; cursor: pointer;"
            @onclick="GoToHomePage">
        Go to Home Page
    </button>
}

@code {

    // Board
    private BoardElements[] board = new BoardElements[TicTacToeRules.BOARD_SIZE];

    // For checking current move number
    // Display who win
    // Are using in signalR
    private string GameStatus = "";
    private string gameId = "";

    // Current game
    private TicTacToeGame.Domain.Models.Game CurrentGame = new();
    private Player currentPlayerHost;
    private Player currentPlayerGuest;

    // SignalR
    private HubConnection hubConnection;
    private string send = "";

    // Authentication data
    private AuthenticationState authState;
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        GameStatus = "Game in progress";
        user = await GameInitializeProcess.HandleGameForAuthenticatedUser(authState);
        CurrentGame = GameInitializeProcess.CurrentGame;

        currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
        currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);

        hubConnection = new HubConnectionBuilder()
            .WithKeepAliveInterval(TimeSpan.FromSeconds(30))
            .WithUrl(_navigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        hubConnection.On<BoardElements[], PlayerType, Guid>("SendGameState", (receivedBoard, nextPlayerTurn, gameId) =>
        {
            InvokeAsync(() =>
            {
                board = receivedBoard;
                CurrentGame.CurrentTurn = nextPlayerTurn;
                StateHasChanged();
            });
        });
        hubConnection.On<GameState, string, Guid>("SendGameStatus", (receiveGameResult, receiveGameStatus, gameId) =>
        {
            InvokeAsync(() =>
            {
                CurrentGame.GameResult = receiveGameResult;
                GameStatus = receiveGameStatus;
                StateHasChanged();
            });
        });

        DisconectingTrackingService.SetHubConnection(hubConnection);

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("JoinGame", CurrentGame.UniqueId);

        UpdatePlayersGameData(hubConnection.ConnectionId);

        DisconectingTrackingService.InitizalisePlayers(currentPlayerHost, currentPlayerGuest, user);

        DisconectingTrackingService.InitializeGame(CurrentGame);

        DisconectingTrackingService.InitializeTimers();

        DisconectingTrackingService.UpdateComponent += () => InvokeAsync(StateHasChanged);

        MakeMovesGameManager.InitializePlayers(currentPlayerHost, currentPlayerGuest, hubConnection);
    }

    private void UpdatePlayersGameData(string connectionId)
    {
        _playerRepository.UpdatePlayerGameContextId(connectionId, currentPlayerHost, currentPlayerGuest, user);

        currentPlayerHost = _playerRepository.GetById(CurrentGame.PlayerHostId);
        currentPlayerGuest = _playerRepository.GetById(CurrentGame.PlayerGuestId);
    }

    private async Task MakeMove(int index)
    {
        DisconectingTrackingService.ReloadMoveTimer();
        await MakeMovesGameManager.MakeMove(index, board, CurrentGame, authState, user);
    }


    private string GetSquareValue(int index)
    {
        return (board[index] == BoardElements.Empty) ? "" : board[index].ToString();
    }

    private bool IsButtonDisabled(int index)
    {
        return CurrentGame.GameResult == GameState.Finished;
    }

    private void GoToHomePage()
    {
        NavigationManager.NavigateTo("/");
    }

    public async void Dispose()
    {
        await hubConnection.SendAsync("UserLeaves", CurrentGame.UniqueId, DisconectingTrackingService.CurrentPlayer.GameConnectionId);
        DisconectingTrackingService._moveTimer?.Dispose();
        DisconectingTrackingService._responseTimer?.Dispose();
        await hubConnection.DisposeAsync();
    }
}