@page "/games-statistics"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using TicTacToeGame.Domain.Models
@using TicTacToeGame.Services.GamesStatisticServices

@inject GamesStatisticsService GamesStatisticsService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

@rendermode InteractiveServer

@attribute [Authorize]

<section>

    <h3 class="text-center">Games Statistics</h3>

    @if (IsLoading)
    {
        <div class="loader"></div>
    }
    else
    {
        <br />
        <br />
        <br />
        <div class="row">
            @if (gamesHistory.Games.Count == 0)
            {
                <div class="row">
                    <h2 class="text-warning col-6">You have no games played</h2>
                    <div class="col-6 d-flex justify-content-end">
                        <input type="button" class="btn btn-primary" value="Go To Home" @onclick="GoToHome" />
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <h4 class="col-6">Games played: @gamesHistory.Games.Count</h4>
                    <div class="col-6 d-flex justify-content-end">
                        <input type="button" class="btn btn-primary" value="Go To Home" @onclick="GoToHome" />
                    </div>
                </div>
                @foreach (var game in gamesHistory.Games)
                {
                    Player hostPlayer = GamesStatisticsService.GetPlayerById(game.PlayerHostId);
                    Player guestPlayer = GamesStatisticsService.GetPlayerById(game.PlayerGuestId);

                    Player winner = GamesStatisticsService.GetWinner(game.Winner, hostPlayer, guestPlayer);
                    bool currentUserWon = (winner != null && winner.Id == _currentPlayer.Id);
                    bool currentUserLost = (winner != null && winner.Id != _currentPlayer.Id);
                    bool isDraw = (winner == null);

                    <div class="card m-1 @(currentUserWon ? "bg-success" : currentUserLost ? "bg-danger" : isDraw ? "bg-warning" : "")">
                        <div class="card-body">
                            <div class="card m-1">
                                <div class="card-body">
                                    <h5 class="card-title">@(winner == null ? "Draw" : $"Winner: {winner.UserName}")</h5>
                                    <p class="card-text">@($"{hostPlayer.UserName} vs {guestPlayer.UserName}")</p>
                                    <p class="card-text">@game.CreatedAt.ToString("D")</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</section>

@code {
    private GamesHistory gamesHistory = new GamesHistory();
    private Player _currentPlayer;
    private string LoadingMessage = "Loading...";
    private string EmptyMessage = "You have no games played";
    private bool IsLoading = true;

    private void GoToHome()
    {
        _navigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? user = authState.User;
        string? _userId = user.Claims.FirstOrDefault()?.Value;
        if (_userId != null)
        {
            _currentPlayer = GamesStatisticsService.GetPlayerById(_userId);
            gamesHistory.Games = await GamesStatisticsService.GetPlayedGames(_userId);
        }
        IsLoading = false;
    }
}
