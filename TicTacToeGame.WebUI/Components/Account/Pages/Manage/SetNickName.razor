@page "/Account/Manage/SetNickname"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using TicTacToeGame.Domain.Models
@using TicTacToeGame.Domain.Repositories
@using TicTacToeGame.WebUI.Data

@inject UserManager<Player> UserManager
@inject SignInManager<Player> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set Nickname</PageTitle>

@if (user != null)
{
    <h3>@(string.IsNullOrEmpty(user.Nickname) ? "Set" : "Change") your nickname</h3>
    <StatusMessage Message="@message" />
    <p class="text-info">
        @if (string.IsNullOrEmpty(user.Nickname))
        {
            <span>You do not have a nickname for this site. Set a nickname so others can recognize you.</span>
        }
        else
        {
            <span>Your current nickname is: @user.Nickname</span>
        }
    </p>
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="set-nickname" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Nickname" class="form-control" placeholder="Please enter your nickname." />
                    <label for="nickname" class="form-label">Nickname</label>
                    <ValidationMessage For="() => Input.Nickname" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">@((string.IsNullOrEmpty(user.Nickname) ? "Set" : "Change") + " nickname")</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private string? message;
    private Player user;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    }

    private async Task OnValidSubmitAsync()
    {
        // Set or change the user's nickname
        user.Nickname = Input.Nickname!;
        await UserManager.UpdateAsync(user);

        // You can perform additional validation or save to the database here if needed.

        RedirectManager.RedirectToCurrentPageWithStatus("Your nickname has been set or changed.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "The nickname field is required.")]
        [StringLength(50, ErrorMessage = "The nickname must be at least {2} and at most {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Nickname")]
        public string? Nickname { get; set; }
    }
}